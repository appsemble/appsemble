{{ if .Values.provision }}
{{ $clientCredentials := split ":" .Values.provision.user.clientCredentials }}
{{ $userId := uuidv4 }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "appsemble.fullname" . }}-provision
  labels:
    {{ include "appsemble.labels" . }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: '2'
    {{ include "appsemble.gitlab" . | indent 4 }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: {{ include "appsemble.fullname" . }}-provision
          image: "bitnamilegacy/postgresql:15"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - psql
          securityContext:
            readOnlyRootFilesystem: true
          args:
            - "--command"
            - |
              BEGIN;
                DELETE FROM "EmailAuthorization" WHERE "UserId" IN (
                  SELECT id FROM "User" WHERE "primaryEmail" = {{ .Values.provision.user.email | squote }}
                );

                DELETE FROM "User" WHERE "primaryEmail" = {{ .Values.provision.user.email | squote }};

                INSERT INTO "User" (id, name, "primaryEmail", password, timezone, created, updated) VALUES (
                  {{ $userId | squote }},
                  {{ .Values.provision.user.name | squote }},
                  {{ .Values.provision.user.email | squote }},
                  {{ (.Values.provision.user.password | htpasswd "" | split ":")._1 | squote }},
                  {{ .Values.provision.user.timezone | squote }},
                  NOW(),
                  NOW()
                );

                INSERT INTO "Organization" (id, name, created, updated) VALUES (
                  {{ .Values.provision.organization.id | squote }},
                  {{ .Values.provision.organization.id | squote }},
                  NOW(),
                  NOW()
                ) ON CONFLICT (id) DO NOTHING;

                INSERT INTO "OrganizationSubscription" ("OrganizationId", "subscriptionPlan", created, updated) VALUES (
                  {{ .Values.provision.organization.id | squote }},
                  {{ .Values.provision.organization.subscription | squote }},
                  NOW(),
                  NOW()
                );

                INSERT INTO "OrganizationMember" ("UserId", "OrganizationId", role, created, updated) VALUES (
                  {{ $userId | squote }},
                  {{ .Values.provision.organization.id | squote }},
                  {{ .Values.provision.user.organizationRole | squote }},
                  NOW(),
                  NOW()
                );

                INSERT INTO "EmailAuthorization" (email, verified, created, updated, "UserId") VALUES (
                  {{ .Values.provision.user.email | squote }},
                  true,
                  NOW(),
                  NOW(),
                  {{ $userId | squote }}
                );

                INSERT INTO "OAuth2ClientCredentials" (id, secret, description, scopes, created, "UserId") VALUES (
                  {{ $clientCredentials._0 | squote }},
                  {{ ($clientCredentials._1 | htpasswd "" | split ":")._1 | squote }},
                  'Used for provisioning the review environment',
                  'apps:write resources:write assets:write blocks:write organizations:write groups:write',
                  NOW(),
                  {{ $userId | squote }}
                );
              COMMIT;
          env:
            - name: PGHOST
              value: {{ .Values.postgresql.fullnameOverride }}
            - name: PGPORT
              value: {{ .Values.global.postgresql.service.ports.postgresql | quote }}
            - name: PGDATABASE
              value: {{ .Values.global.postgresql.auth.database }}
            - name: PGUSER
              value: {{ .Values.global.postgresql.auth.username }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.userPasswordKey | quote }}
{{ end }}
