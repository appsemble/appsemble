{
  "$schema": "https://json-schema.org/draft-07/schema",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "replicaCount": {
      "type": "integer"
    },
    "image": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "repository": {
          "type": "string",
          "description": "Set this to `registry.gitlab.io/appsemble/appsemble` to support prerelease versions."
        },
        "tag": {
          "type": ["string", "null"],
          "description": "If specified, this Docker image tag will be used. Otherwise, it will use the chartâ€™s `appVersion`."
        },
        "pullPolicy": {
          "description": "This can be used to override the default image pull policy.",
          "enum": ["Always", "IfNotPresent"]
        }
      }
    },
    "nameOverride": {
      "type": "string",
      "description": "This can be used to override the name in the templates."
    },
    "fullnameOverride": {
      "type": "string",
      "description": "This can be used to override the full name in the templates."
    },
    "service": {
      "type": "object",
      "additionalItems": false,
      "properties": {
        "type": {
          "description": "The type of the Appsemble service.",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"]
        },
        "port": {
          "type": "integer",
          "description": "The HTTP port on which the Appsemble service will be exposed to the cluster.",
          "minimum": 1,
          "maximum": 65535
        }
      }
    },
    "ingress": {
      "type": "object",
      "additionalItems": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether or not the service should be exposed through an ingress."
        },
        "className": {
          "type": "string",
          "description": "The ingress class name."
        },
        "annotations": {
          "type": "object",
          "description": "Annotations for the Appsemble ingress.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "host": {
          "type": "string",
          "description": "The host name on which the ingress will expose the service."
        },
        "tls": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "secretName": {
              "type": "string",
              "description": "The secret name to use to configure TLS for the top level host."
            },
            "wildcardSecretName": {
              "type": "string",
              "description": "The secret name to use to configure TLS for the direct wildcard host."
            }
          }
        },
        "issuer": {
          "type": "string",
          "description": "The name of the cert-manager issuer to use for apps."
        },
        "clusterIssuer": {
          "type": "string",
          "description": "The name of the cert-manager cluster issuer to use for apps."
        }
      }
    },
    "resources": {
      "type": "object"
    },
    "nodeSelector": {
      "type": "object"
    },
    "tolerations": {
      "type": "array"
    },
    "affinity": {
      "type": "object"
    },
    "smtpSecret": {
      "type": "string",
      "description": "The secret to use for configuring SMTP. The secret should contain the following values: `host`, `port`, `secure`, `user`, `pass`, `from`."
    },
    "imapSecret": {
      "type": "string",
      "description": "The secret to use for configuring IMAP. The secret should contain the following values: `imap-host`, `imap-port`, `imap-secure`, `imap-user`, `imap-pass`, `imap-copy-to-sent-folder`."
    },
    "adminApiSecret": {
      "type": "string",
      "description": "The secret to use for authenticating admin users, e.g. for newsletter-related endpoints. The secret should contain the following values: `admin-api-secret`."
    },
    "oauthSecret": {
      "type": ["string", "null"],
      "description": "The secret which holds client ids and client secrets for OAuth2 providers."
    },
    "sentry": {
      "type": ["object", "null"],
      "description": "Sentry settings",
      "required": ["secret"],
      "properties": {
        "allowedDomains": {
          "type": "array",
          "description": "A list of domains on which Sentry integration will be enabled. Wildcards are supported.",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "type": "string",
          "description": "The secret from which to read the Sentry DSN."
        },
        "environment": {
          "type": "string",
          "description": "The environment to send with Sentry error reports"
        }
      }
    },
    "secretSecret": {
      "type": "string",
      "description": "The Kubernetes secret which holds the `SECRET` environment variable."
    },
    "cronjob": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "jobsHistoryLimit": {
          "type": "integer",
          "description": "How long to keep logs for cronjobs in days."
        }
      }
    },
    "gitlab": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "app": {
          "type": ["string", "null"]
        },
        "env": {
          "type": ["string", "null"]
        }
      }
    },
    "migrateTo": {
      "type": ["string", "null"],
      "description": "If specified, the database will be migrated to this specific version. To upgrade to the latest version, specify `next`"
    },
    "proxy": {
      "type": "boolean",
      "description": "If `true`, The proxy is trusted for logging purposes."
    },
    "forceProtocolHttps": {
      "type": "boolean",
      "description": "If `true`, the Helm chart assumes the application is reached over HTTPS"
    },
    "global": {
      "type": "object"
    },
    "postgresql": {
      "type": "object"
    },
    "postgresSSL": {
      "type": "boolean",
      "description": "If `true`, connect establish the PostgreSQL connection over SSL."
    },
    "quotas": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "appEmail": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "If specified, rate limiting will be applied to emails sent by apps without a custom mail server configured."
            },
            "dailyLimit": {
              "type": "integer",
              "description": "The maximum number of emails an app can send per day without a custom mail server configured."
            },
            "alertOrganizationOwner": {
              "type": "boolean",
              "description": "Whether to alert the app's organization owner when the daily email limit is reached."
            }
          }
        }
      }
    },
    "remote": {
      "type": ["string", "null"],
      "description": "A remote Appsemble server to connect to in order to synchronize blocks.",
      "format": "uri"
    },
    "provision": {
      "type": "object",
      "description": "Provision the database with a preconfigured account and client credentials. This is for development purposes only.",
      "additionalProperties": false,
      "required": ["account"],
      "properties": {
        "account": {
          "type": "object",
          "description": "The account to create.",
          "additionalProperties": false,
          "required": ["clientCredentials", "email", "name", "password", "timezone"],
          "properties": {
            "clientCredentials": {
              "type": "string",
              "description": "Client credentials that can be used to authenticate the user."
            },
            "email": {
              "type": "string",
              "description": "The email address of the user account.",
              "format": "email"
            },
            "name": {
              "type": "string",
              "description": "The display name of the user account."
            },
            "password": {
              "type": "string",
              "description": "The password of the user account."
            },
            "timezone": {
              "type": "string",
              "description": "The timezone of the user account"
            }
          }
        }
      }
    }
  }
}
