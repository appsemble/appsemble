x-database-host: &database-host database
x-database-port: &database-port 5432
x-database-name: &database-name appsemble
x-database-user: &database-user admin
x-database-password: &database-password password

x-minio-host: &minio-host minio
x-minio-root-user: &minio-root-user admin
x-minio-root-password: &minio-root-password password

x-bot-account-name: &bot-account-name bot
x-bot-account-email: &bot-account-email bot@example.com
x-bot-account-password: &bot-account-password password
x-appsemble-organization: &appsemble-organization appsemble
x-appsemble-client-credentials: &appsemble-client-credentials 'user:password'

x-appsemble-remote: &appsemble-remote 'http://appsemble:9999'

name: appsemble-e2e-local
networks:
  appsemble-e2e-local:
    name: appsemble-e2e-local

services:
  database:
    container_name: *database-host
    image: postgres:15
    networks: [appsemble-e2e-local]
    environment:
      POSTGRES_DB: *database-name
      POSTGRES_USER: *database-user
      POSTGRES_PASSWORD: *database-password
    ports: ['5434:5432']

  minio:
    container_name: *minio-host
    image: minio/minio:latest
    networks: [appsemble-e2e-local]
    environment:
      MINIO_ROOT_USER: *minio-root-user
      MINIO_ROOT_PASSWORD: *minio-root-password
    command: server /data
    ports: ['9002:9000']
    volumes:
      - minio-e2e:/data

  appsemble:
    container_name: appsemble
    image: '${APPSEMBLE_IMAGE:-appsemble/appsemble:latest}'
    networks: [appsemble-e2e-local]
    depends_on: [database]
    environment:
      SECRET: secret
      AES_SECRET: secret
      HOST: *appsemble-remote
      DATABASE_HOST: *database-host
      DATABASE_PORT: *database-port
      DATABASE_NAME: *database-name
      DATABASE_USER: *database-user
      DATABASE_PASSWORD: *database-password
      S3_HOST: *minio-host
      S3_SECURE: false
      S3_ACCESS_KEY: *minio-root-user
      S3_SECRET_KEY: *minio-root-password
      migrateTo: next
    ports: ['9998:9999']
    tty: true
    stdin_open: true
    working_dir: /app

  seeder:
    container_name: seeder
    image: node:18.18.0-bookworm-slim
    networks: [appsemble-e2e-local]
    depends_on: [database]
    environment:
      PGHOST: *database-host
      PGPORT: *database-port
      PGDATABASE: *database-name
      PGUSER: *database-user
      PGPASSWORD: *database-password
      BOT_ACCOUNT_NAME: *bot-account-name
      BOT_ACCOUNT_EMAIL: *bot-account-email
      BOT_ACCOUNT_PASSWORD: *bot-account-password
      ORGANIZATION: *appsemble-organization
      APPSEMBLE_REMOTE: *appsemble-remote
      APPSEMBLE_CLIENT_CREDENTIALS: *appsemble-client-credentials
    tty: true
    stdin_open: true
    working_dir: /app
    entrypoint:
      - 'sh'
      - '-c'
      - |
        cp -r /app-ro/apps /app/apps && \
        cp -r /app-ro/blocks /app/blocks && \
        cp -r /app-ro/scripts /app/scripts && \

        mkdir /app/packages && \
        cp -r /app-ro/packages/cli /app/packages/cli && \
        cp -r /app-ro/packages/node-utils /app/packages/node-utils && \
        cp -r /app-ro/packages/preact /app/packages/preact && \
        cp -r /app-ro/packages/preact-components /app/packages/preact-components && \
        cp -r /app-ro/packages/scripts /app/packages/scripts && \
        cp -r /app-ro/packages/sdk /app/packages/sdk && \
        cp -r /app-ro/packages/tsconfig /app/packages/tsconfig && \
        cp -r /app-ro/packages/types /app/packages/types && \
        cp -r /app-ro/packages/utils /app/packages/utils && \
        cp -r /app-ro/packages/web-utils /app/packages/web-utils && \
        cp -r /app-ro/packages/webpack-config /app/packages/webpack-config && \
        cp -r /app-ro/packages/webpack-core /app/packages/webpack-core && \

        mkdir -p /app/packages/server/assets && \
        cp /app-ro/packages/server/assets/appsemble.png /app/packages/server/assets && \

        mkdir -p /app/packages/studio/pages/docs && \
        cp -r /app-ro/packages/studio/pages/docs /app/packages/studio/pages && \

        cp /app-ro/LICENSE.md /app && \
        cp /app-ro/.postcssrc.json /app && \
        cp /app-ro/tsconfig.json /app && \
        cp /app-ro/package.json /app && \
        cp /app-ro/package-lock.json /app && \

        tail -f /dev/null
    volumes:
      - ./:/app-ro:ro
      - seeder:/app
    healthcheck:
      test: ['CMD-SHELL', '[ -f /app/package-lock.json ] || exit 1']
      interval: 5s
      timeout: 2s
      retries: 10

  playwright:
    container_name: playwright
    image: mcr.microsoft.com/playwright
    networks: [appsemble-e2e-local]
    depends_on:
      seeder:
        condition: service_healthy
    environment:
      BOT_ACCOUNT_NAME: *bot-account-name
      BOT_ACCOUNT_EMAIL: *bot-account-email
      BOT_ACCOUNT_PASSWORD: *bot-account-password
      E2E_HOST: *appsemble-remote
      CI: true
    tty: true
    stdin_open: true
    entrypoint:
      - 'sh'
      - '-c'
      - |
        cp -r /app-ro/scripts /app/scripts && \

        cp -r /app-ro/packages/types /app/packages/types && \
        cp -r /app-ro/packages/utils /app/packages/utils && \

        cp /app-ro/tsconfig.json /app && \
        cp /app-ro/package.json /app && \
        cp /app-ro/package-lock.json /app && \

        exec /bin/bash
    working_dir: /app
    volumes:
      - ./:/app-ro:ro
      - playwright:/app
      - ./packages/e2e/:/app/packages/e2e/
    healthcheck:
      test: ['CMD-SHELL', '[ -f /app/package-lock.json ] || exit 1']
      interval: 5s
      timeout: 2s
      retries: 5
    links:
      - 'appsemble:controller.appsemble.appsemble'
      - 'appsemble:empty.appsemble.appsemble'
      - 'appsemble:holidays.appsemble.appsemble'
      - 'appsemble:notes.appsemble.appsemble'
      - 'appsemble:person.appsemble.appsemble'
      - 'appsemble:remappers.appsemble.appsemble'
      - 'appsemble:soundboard.appsemble.appsemble'
      - 'appsemble:survey.appsemble.appsemble'
      - 'appsemble:triggers.appsemble.appsemble'
      - 'appsemble:unlittered.appsemble.appsemble'

volumes:
  minio-e2e:
  seeder:
  playwright:
