default:
  image: node:18.18.0-bookworm-slim

stages:
  - test
  - build
  - end 2 end
  - publish
  - deploy
  - provision
  - performance

workflow:
  rules:
    # By default, run jobs for every merge request.
    - if: $CI_MERGE_REQUEST_ID
    # By default, run jobs for every commit on main.
    - if: $CI_COMMIT_BRANCH == 'main'
    # By default, run jobs for every schedule
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    # By default, run jobs for every tag
    - if: $CI_COMMIT_TAG

###################################################################################################
#  Job Templates                                                                                  #
###################################################################################################

# A preset for running Docker in Docker.
.docker:
  interruptible: true
  services:
    - docker:dind
  image: docker
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# A preconfigured environment for using npm.
.npm:
  interruptible: true
  dependencies: []
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules
      - '**/node_modules'
  before_script:
    - npm ci

# A template for creating a minor or patch release
.release:
  extends: .npm
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual
  allow_failure: true
  script:
    - apt-get update
    - apt-get install --yes git gnupg
    - gpg --import "$GPG_PRIVATE_KEY"
    - npm run scripts -- release "$INCREMENT"
    - npm install
    - VERSION="$(npm --silent run appsemble -- --version)"
    - |
      MESSAGE="$VERSION

      $(npm --silent run scripts get-release-notes)"
    - git config user.email bot@appsemble.com
    - git config user.name Appsemble
    - git add .
    - git commit --message "$MESSAGE" --cleanup whitespace --gpg-sign
    - git tag "$VERSION" --message "$MESSAGE" --cleanup whitespace --sign
    - git push "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/appsemble" HEAD:main
    - |
      if [ $? -eq 0 ]; then
        echo "Code push successful. Pushing tags..."
        git push "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/appsemble" --tags
      else
        echo "Push to main branch failed. Tags will not be pushed."
      fi

###################################################################################################
#  Test Stage                                                                                     #
###################################################################################################

# Spell check using cspell
cspell:
  extends: .npm
  script:
    - npx -- cspell

# Lint JavaScript code using ESLint.
eslint:
  extends: .npm
  script:
    - npx -- eslint --format gitlab .
  artifacts:
    reports:
      codequality: gl-codequality.json

# Lint Helm charts.
helm lint:
  image: dtzar/helm-kubectl:3
  script:
    - helm lint config/charts/*

# Lint shell scripts
shellcheck:
  image: koalaman/shellcheck-alpine
  script:
    - printf "Evaluating:\n$(find . -name '*.sh')"
    - find . -name '*.sh' | xargs shellcheck

# Verify app messages are in sync with the app definition.
i18n:
  extends: .npm
  script:
    - npm run appsemble -- app extract-messages --verify nl apps/*

# Check formatting using prettier.
prettier:
  extends: .npm
  script:
    - npx -- prettier .

# Lint Markdown using remark.
remark lint:
  extends: .npm
  script:
    - npx -- remark --frail --no-stdout .

# Lint CSS using stylelint.
stylelint:
  extends: .npm
  script:
    - npx -- stylelint .

# Run unittests using NodeJS 18.
test node 18:
  interruptible: true
  services:
    - postgres:15
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - npm ci
    - npm test -- --coverage --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL
  parallel: 3
  artifacts:
    paths:
      - coverage
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

# Check type validity for our TypeScript files.
tsc:
  extends: .npm
  script:
    - npx --workspaces tsc

# Check type validity for our TypeScript files.
validate:
  extends: .npm
  script:
    - npm run scripts -- validate

# Check migrations are in sync with Sequelize models
check migrations:
  extends: .npm
  interruptible: true
  services:
    - postgres:15
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - npm run appsemble -- check-migrations

# Check down migrations
check down migrations:
  extends: .npm
  interruptible: true
  services:
    - postgres:15
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - npm run appsemble -- check-down-migrations

# Fuzz test migrations for anomalous up and down migration failures
fuzz migrations:
  extends: .npm
  interruptible: true
  services:
    - postgres:15
  variables:
    POSTGRES_DB: testAppsemble
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    DATABASE_URL: 'postgres://admin:password@postgres:5432/testAppsemble'
  script:
    - npm run appsemble -- fuzz-migrations

###################################################################################################
#  Build Stage                                                                                    #
###################################################################################################

# Build the Docker image.
build docker image:
  extends: .docker
  stage: build
  needs: []
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" --build-arg "version=$CI_COMMIT_REF_NAME" --build-arg "date=$CI_JOB_STARTED_AT" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

# Build the npm packages that should be published.
pack:
  extends: .npm
  stage: build
  needs: []
  script:
    - mkdir build/
    - npm --pack-destination build --workspace @appsemble/types pack
    - npm --pack-destination build --workspace @appsemble/sdk pack
    - npm --pack-destination build --workspace @appsemble/preact pack
    - npm --pack-destination build --workspace @appsemble/utils pack
    - npm --pack-destination build --workspace @appsemble/node-utils pack
    - npm --pack-destination build --workspace @appsemble/webpack-config pack
    - npm --pack-destination build --workspace @appsemble/cli pack
    - npm --pack-destination build --workspace @appsemble/tsconfig pack
    - npm --pack-destination build --workspace appsemble pack
    - npm --pack-destination build --workspace create-appsemble pack
    - npm run scripts -- validate-packaged-exports build/*
    - find build -mindepth 1 -maxdepth 1 -type d -exec rm -r {} +
  artifacts:
    name: npm packages
    expose_as: packages
    paths:
      - build/

# Package the Helm chart
helm package:
  image: dtzar/helm-kubectl:3
  stage: build
  needs: []
  script:
    - cp LICENSE.md config/charts/appsemble/
    - config/bin/helm-package.sh --dependency-update --destination public config/charts/appsemble/
  artifacts:
    name: Helm chart
    expose_as: Helm chart
    paths:
      - public/

###################################################################################################
#  End 2 End Stage                                                                               #
###################################################################################################

e2e:
  interruptible: true
  stage: end 2 end
  extends: .docker
  needs:
    - build docker image
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_TAG
  variables:
    APPSEMBLE_IMAGE: '$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG'
  script:
    - docker compose --project-name appsemble-e2e --file docker-compose-e2e.yaml up -d
    - . scripts/e2e.sh
  after_script:
    - docker compose --project-name appsemble-e2e --file docker-compose-e2e.yaml down --volumes
  artifacts:
    expose_as: Playwright videos
    when: always
    paths:
      - packages/e2e/test-results/
    reports:
      junit: packages/e2e/results.xml

e2e apps:
  stage: end 2 end
  needs:
    - build docker image
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_TAG
  inherit:
    variables: false
  variables:
    APPSEMBLE_IMAGE: '$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG'
  parallel:
    matrix:
      - APP:
          [
            'appsemble/apps/template',
            'appsemble/apps/sittard-geleen',
            'appsemble/apps/eindhoven',
            'appsemble/apps/amersfoort',
            'appsemble/sounding-bodies',
            'appsemble/apps/tbvwonen',
          ]
  trigger:
    project: $APP
    strategy: depend
    branch: main

###################################################################################################
#  Publish Stage                                                                                  #
###################################################################################################

twitter:
  extends: .npm
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm run scripts -- twitter

# Update metadata on Docker Hub
docker metadata:
  extends: .npm
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm run scripts -- docker-metadata

# Create a GitHub release
github release:
  extends: .npm
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm run scripts -- github-release

# Create a GitLab release
gitlab release:
  extends: .npm
  stage: publish
  # This is new and mainly used to update nice-to-have metadata.
  # Allow failure to prevent blocking of important jobs.
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm run scripts -- gitlab-release

publish docker:
  extends: .docker
  stage: publish
  needs:
    - build docker image
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "appsemble/appsemble:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "appsemble/appsemble:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker push "appsemble/appsemble:latest"
    - docker push "appsemble/appsemble:$CI_COMMIT_TAG"

# Publish the Helm chart to https://charts.appsemble.com
publish helm:
  image: dtzar/helm-kubectl:3
  needs:
    - helm package
  stage: publish
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apk add git gnupg
    - gpg --import "$GPG_PRIVATE_KEY"
    - git init
    - git remote add origin "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/charts.git"
    - git fetch --depth 1
    - git checkout --track origin/main
    - git config commit.gpgSign true
    - git config user.email bot@appsemble.com
    - git config user.name Appsemble
    - git add public
    - git commit --message "Add Appsemble Helm chart $CI_COMMIT_TAG"
    - git push origin main
    - helm repo add appsemble https://charts.appsemble.com
    - | # Wait until the chart has been published downstream
      while ! helm show all 'appsemble/appsemble' --version "$CI_COMMIT_TAG" 2> /dev/null; do
        sleep 3
        echo retrying in 3 seconds…
        helm repo update > /dev/null
      done

# Publish npm packages to npmjs.org.
publish npm:
  stage: publish
  dependencies:
    - pack
  needs:
    - pack
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  script:
    - npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
    - find . -exec npm publish --access public --provenance {} \;

# Perform various post release actions.
sentry release:
  needs: []
  image:
    name: getsentry/sentry-cli:2
    entrypoint: [/bin/sh, -c]
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - sentry-cli releases new --finalize "$CI_COMMIT_TAG"
    - sentry-cli releases set-commits --auto "$CI_COMMIT_TAG"

# Create a patch release
release patch:
  extends: .release
  variables:
    INCREMENT: patch

# Create a minor release
release minor:
  extends: .release
  variables:
    INCREMENT: minor

###################################################################################################
#  Deploy Stage                                                                                   #
###################################################################################################

# Delete all successful jobs for review environments nightly
cleanup k8s jobs:
  image: dtzar/helm-kubectl:3
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    - kubectl delete jobs.batch --field-selector 'status.successful=1'

# Update lockfile and fix formatting where possible
update dependencies:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  cache:
    policy: push
    key:
      files:
        - package-lock.json
    paths:
      - node_modules
      - '**/node_modules'
  script:
    - apt update
    - apt install --yes git gnupg
    - gpg --import "$GPG_PRIVATE_KEY"
    - git init
    - git remote add origin "https://appsemble-bot:$GITLAB_ACCESS_TOKEN@gitlab.com/appsemble/appsemble.git"
    - git fetch --depth 1
    - git checkout -B update-lockfile origin/main
    - git config commit.gpgSign true
    - git config user.email bot@appsemble.com
    - git config user.name Appsemble
    - rm package-lock.json
    - npm install --ignore-scripts
    - npx -- eslint --fix . || true
    - npx -- remark . -o || true
    - npx -- stylelint --fix . || true
    - npx -- prettier --write . || true
    - git commit --all --message 'Update package-lock.json'
    - git push --force origin update-lockfile
      -o merge_request.create
      -o merge_request.label=Chore
      -o merge_request.merge_when_pipeline_succeeds
      -o merge_request.remove_source_branch

# Deploy the Docker image for a branch to a review environment.
review:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - build docker image
    - job: helm package
      artifacts: true
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    url: https://$CI_MERGE_REQUEST_IID.appsemble.review
    on_stop: stop review
    auto_stop_in: 1 day
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    # This is the only way to make sure the review environment can be overwritten
    - helm delete "review-$CI_MERGE_REQUEST_IID" || true
    - kubectl delete pvc --selector "app.kubernetes.io/instance=review-$CI_MERGE_REQUEST_IID" || true
    - kubectl delete namespace "companion-containers-review-$CI_MERGE_REQUEST_IID" || true
    - helm install "review-$CI_MERGE_REQUEST_IID" ./public/appsemble-*.tgz
      --atomic
      --set "fullnameOverride=review-$CI_MERGE_REQUEST_IID"
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=$CI_COMMIT_REF_SLUG"
      --set "ingress.clusterIssuer=acme-issuer-dev"
      --set "ingress.enabled=true"
      --set "ingress.host=${CI_ENVIRONMENT_URL/https:\/\//}"
      --set "ingress.tls.secretName=review-$CI_MERGE_REQUEST_IID-tls"
      --set "ingress.tls.wildcardSecretName=review-$CI_MERGE_REQUEST_IID-tls-wildcard"
      --set "migrateTo=next"
      --set "global.postgresql.auth.existingSecret=postgresql-secret"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.password=$BOT_ACCOUNT_PASSWORD"
      --set "provision.account.timezone=Europe/Amsterdam"
      --set "postgresql.fullnameOverride=review-$CI_MERGE_REQUEST_IID-postgresql"
      --set "proxy=true"
      --set "remote=https://appsemble.app"
      --set "sentry.allowedDomains={*.appsemble.review}"
      --set "sentry.environment=review-$CI_MERGE_REQUEST_IID"
      --set "sentry.secret=sentry"

# Stop a review environment.
stop review:
  image: dtzar/helm-kubectl:3
  dependencies: []
  stage: deploy
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
      when: manual
  allow_failure: true
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace review
    - helm delete "review-$CI_MERGE_REQUEST_IID"
    - kubectl delete pvc --selector "app.kubernetes.io/instance=review-$CI_MERGE_REQUEST_IID"
    - kubectl delete namespace "companion-containers-review-$CI_MERGE_REQUEST_IID" || true

# Deploy the Docker image for main to the staging environment.
staging:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - build docker image
    - job: helm package
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  environment:
    name: staging
    url: https://staging.appsemble.review
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:development"
    - kubectl config set-context --current --namespace staging
    # This is the only way to make sure staging can be overwritten
    - helm delete staging || true
    - kubectl delete pvc --selector "app.kubernetes.io/instance=staging" || true
    - kubectl delete namespace "companion-containers-staging" || true
    - helm install staging ./public/appsemble-*.tgz
      --atomic
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.auth.existingSecret=postgresql-secret"
      --set "image.pullPolicy=Always"
      --set "image.repository=$CI_REGISTRY_IMAGE"
      --set "image.tag=main"
      --set "ingress.clusterIssuer=acme-issuer-dev"
      --set "ingress.enabled=true"
      --set "ingress.host=staging.appsemble.review"
      --set "ingress.tls.secretName=staging-tls"
      --set "ingress.tls.wildcardSecretName=staging-tls-wildcard"
      --set "migrateTo=next"
      --set "oauthSecret=oauth2"
      --set "postgresql.fullnameOverride=staging-postgresql"
      --set "provision.account.clientCredentials=$APPSEMBLE_CLIENT_CREDENTIALS"
      --set "provision.account.email=$BOT_ACCOUNT_EMAIL"
      --set "provision.account.name=$BOT_ACCOUNT_NAME"
      --set "provision.account.password=$BOT_ACCOUNT_PASSWORD"
      --set "provision.account.timezone=Europe/Amsterdam"
      --set "proxy=true"
      --set "remote=https://appsemble.app"
      --set "sentry.allowedDomains={*.appsemble.review}"
      --set "sentry.environment=staging"
      --set "sentry.secret=sentry"
      --set "quotas.appEmail.enabled=true"
      --set "quotas.appEmail.dailyLimit=10"
      --set "quotas.appEmail.alertOrganizationOwner=true"

production:
  image: dtzar/helm-kubectl:3
  stage: deploy
  needs:
    - publish docker
    - publish helm
  rules:
    - if: $CI_COMMIT_TAG
  environment:
    name: production
    url: https://appsemble.app
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config use-context "$CI_PROJECT_PATH:production"
    - kubectl config set-context --current --namespace appsemble
    - helm repo add appsemble https://charts.appsemble.com
    # Prevent a finished job without chart actually serving.
    - |
      retries=0
      found=0
      while [ $retries -lt 100 ] && [ $found -ne 1 ]; do
        helm repo update
        if helm search repo appsemble/appsemble --version "$CI_COMMIT_TAG" --fail-on-no-result; then
          echo "Chart found!"
          found=1
        else
          echo "Chart version $CI_COMMIT_TAG not found, retrying in 5 seconds..."
          sleep 5
          retries=$((retries + 1))
        fi
      done
      if [ $found -ne 1 ]; then
        echo "Maximum number of attempts reached. Chart not found."
        exit 1
      fi
    - helm upgrade appsemble appsemble/appsemble
      --debug
      --timeout 30m
      --version "$CI_COMMIT_TAG"
      --set "gitlab.app=$CI_PROJECT_PATH_SLUG"
      --set "gitlab.env=$CI_ENVIRONMENT_SLUG"
      --set "global.postgresql.auth.existingSecret=$POSTGRESQL_SECRET"
      --set "global.postgresql.auth.database=$POSTGRESQL_DATABASE"
      --set "global.postgresql.auth.username=$POSTGRESQL_USERNAME"
      --set "global.postgresql.service.ports.postgresql=$POSTGRESQL_PORT"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/proxy-body-size=50m"
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/force-ssl-redirect=\"true\""
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-redirect=\"true\""
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/hsts=\"true\""
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/hsts-include-subdomains=\"true\""
      --set "ingress.annotations.nginx\.ingress\.kubernetes\.io/hsts-max-age=\"31536000\""
      --set "ingress.clusterIssuer=acme-issuer-prod"
      --set "ingress.enabled=true"
      --set "ingress.host=appsemble.app"
      --set "ingress.tls.secretName=appsemble-tls"
      --set "ingress.tls.wildcardSecretName=appsemble-tls-wildcard"
      --set "oauthSecret=oauth2"
      --set "postgresql.fullnameOverride=$POSTGRESQL_HOST"
      --set "postgresql.enabled=false"
      --set 'postgresSSL=true'
      --set "proxy=true"
      --set "sentry.allowedDomains={*.appsemble.app, appsemble.app}"
      --set "sentry.environment=production"
      --set "sentry.secret=sentry"
      --set "quotas.appEmail.enabled=true"
      --set "quotas.appEmail.dailyLimit=10"
      --set "quotas.appEmail.alertOrganizationOwner=true"
      --wait

###################################################################################################
#  Provision Stage                                                                                #
###################################################################################################

# Provision the review environment with the blocks that were built in the build stage.
provision review:
  extends: .npm
  stage: provision
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
  needs:
    - review
  script:
    - npm run scripts -- release patch
    - npm run appsemble -- config set context review
    - npm run appsemble -- config set remote "https://$CI_MERGE_REQUEST_IID.appsemble.review"
    - npm run scripts -- wait-for-api
    - . scripts/setup-appsemble.sh

# Provision the staging environment with the blocks that were built in the build stage.
provision staging:
  extends: .npm
  stage: provision
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  needs:
    - staging
  script:
    - npm run scripts -- release patch
    - npm run appsemble -- config set context staging
    - npm run appsemble -- config set remote https://staging.appsemble.review
    - npm run appsemble -- organization create appsemble
      --description 'The open source low-code app building platform'
      --email support@appsemble.com
      --icon packages/server/assets/appsemble.png
      --name Appsemble
      --website https://appsemble.com
    - npm run appsemble -- -vv block publish blocks/*
    - npm run appsemble -- -vv app publish apps/* --resources --assets --assets-clonable --modify-context

# Provision the production environment with the blocks that were built in the build stage.
provision production:
  extends: .npm
  stage: provision
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - production
  environment:
    name: production
    action: prepare
  script:
    - npm run appsemble -- config set context production
    - npm run appsemble -- config set remote https://appsemble.app
    - npm run appsemble -- config set ignore-conflict true
    - npm run appsemble -- -vv block publish blocks/*
    - apt-get update
    - apt-get install --yes git gnupg yq
    - ./scripts/publish-or-update-apps.sh --push-to-main production

###################################################################################################
#  Performance Stage                                                                               #
###################################################################################################

lighthouse:
  interruptible: true
  stage: performance
  extends: .npm
  image: $CI_REGISTRY/appsemble/docker-node-chrome
  needs:
    - job: provision review
      optional: true
    - job: provision staging
      optional: true
    - job: provision production
      optional: true
  rules:
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH == 'appsemble/appsemble'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_TAG
  script:
    - npm run scripts -- wait-for-ssl
    - npx -- lhci collect
    - npx -- lhci assert
  artifacts:
    expose_as: Lighthouse reports
    when: always
    paths:
      - .lighthouseci
