// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`getProjectImplementations > official blocks > action-button 1`] = `
{
  "actions": {
    "onClick": {
      "description": "Action that gets dispatched when the button is clicked.",
    },
  },
  "events": undefined,
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "icon": {
        "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.",
        "format": "fontawesome",
        "type": "string",
      },
      "title": {
        "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
        "format": "remapper",
      },
    },
    "required": [
      "icon",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > audio 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "onAudio": {
        "description": "The event to listen on for new data.

The result must be either a audio URL or an object containing a property \`url\`.",
      },
      "stop": {
        "description": "The event to stop listening to audio.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "src": {
        "description": "The source of the player. This can either be a URL pointing to a website, or it can point to an asset. The asset can either be the object, or the ID of the asset",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > barcode-scan 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "foundBarcode": {
        "description": "Event that gets emitted once the barcode scanner has identified and resolved a barcode.

barcode event only holds the object with property barcode.",
      },
    },
    "listen": undefined,
  },
  "messages": {
    "empty": {
      "description": "This message is displayed if the data is empty.",
    },
    "error": {
      "description": "This message is displayed if there was a problem loading the data.",
    },
    "loading": {
      "description": "This message is displayed if no data has been loaded yet.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "barcodeType": {
        "default": "code_128",
        "description": "The type of barcode that will be scanned by the block.

Choosing 'multiple' will display a dropdown box to show list of code type to select from.

It has to be configured according to the code image to allow scanning.",
        "enum": [
          "2of5",
          "code_32",
          "code_39_vin",
          "code_39",
          "code_93",
          "code_128",
          "ean_2",
          "ean_5",
          "ean_8",
          "ean",
          "i2of5",
          "multiple",
          "upc_e",
          "upc",
        ],
        "type": "string",
      },
      "patchSize": {
        "default": "x-large",
        "description": "The type of patch size should depend on the size of code image.

Choosing 'multiple' will display a dropdown box to show list of patch size to select from.

It has to be configured according to the code image to allow scanning.",
        "enum": [
          "large",
          "medium",
          "multiple",
          "small",
          "x-large",
          "x-small",
        ],
        "type": "string",
      },
      "resolution": {
        "default": 800,
        "description": "The resolution should allow scanning code to be precise.

It has to be configured according to the code image to allow scanning.",
        "type": "number",
      },
      "showBarcode": {
        "default": false,
        "description": "Option to show scanned code",
        "type": "boolean",
      },
      "type": {
        "description": "Type is either camera or file

Type 'file' allows to upload code image to scan.

Type 'camera' allows to scan code using webcam.",
        "enum": [
          "camera",
          "file",
        ],
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > button-list 1`] = `
{
  "actions": {
    "$any": {
      "description": "A custom action that gets dispatched when a button is clicked that has the same click action
specified as the name of this action.",
    },
    "onClick": {
      "description": "Action that gets dispatched when a button is clicked that doesn’t specify its own click
action.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

This data can be used with remap to display labels dynamically based on the received data.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Button": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "description": "The Bulma color to use.",
          },
          "fullwidth": {
            "description": "Whether the button should be full width or not.

By default buttons only take up as much space as needed.",
            "type": "boolean",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "iconSide": {
            "description": "When set to true, icon will be located on the right side of the button in the list.",
            "type": "boolean",
          },
          "inverted": {
            "description": "Whether the text and background colors should be inverted.",
            "type": "boolean",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "light": {
            "description": "When set to true, the ‘light’ set of Bulma colors are used.",
            "type": "boolean",
          },
          "onClick": {
            "description": "The name of the action to trigger when the button is clicked.",
            "format": "action",
            "type": "string",
          },
          "outlined": {
            "description": "Whether the button should display its colors in the outlines.",
            "type": "boolean",
          },
          "rounded": {
            "description": "Whether the button should be rounded.",
            "type": "boolean",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "description": "The size of the button. By default the size is ‘normal’.",
          },
          "title": {
            "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "buttons": {
        "description": "The list of buttons.",
        "items": {
          "$ref": "#/definitions/Button",
        },
        "type": "array",
      },
    },
    "required": [
      "buttons",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > chart 1`] = `
{
  "actions": {
    "onClick": {
      "description": "This action is launched whenever a user clicks on the chart canvas.

Returns the data of the clicked data in the format of \`label\`, \`data\`.

Returns an empty object if the user clicks outside of a data entry.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "add": {
        "description": "Add new data to the chart.

Refer to the block description for more information on the supported data format.",
      },
      "replace": {
        "description": "Replace all current data with the new data.

Refer to the block description for more information on the supported data format.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Color": {
        "description": "A hexadecimal color.",
        "pattern": "^#[a-fA-F\\d]{6}$",
        "type": "string",
      },
      "Font": {
        "additionalProperties": false,
        "properties": {
          "size": {
            "description": "The size of the label's font in px.",
            "type": "number",
          },
        },
        "required": [
          "size",
        ],
        "type": "object",
      },
      "LabelOptions": {
        "additionalProperties": false,
        "properties": {
          "font": {
            "$ref": "#/definitions/Font",
            "description": "Options for the font style for the labels on the horizontal axis.",
          },
          "maxWidth": {
            "description": "The maximum length (words) of the labels on the horizontal axis.",
            "type": "number",
          },
        },
        "required": [
          "font",
          "maxWidth",
        ],
        "type": "object",
      },
      "YAxis": {
        "additionalProperties": false,
        "properties": {
          "colors": {
            "default": [
              "#ededed",
            ],
            "description": "By default a grey tone is used.",
            "items": {
              "$ref": "#/definitions/Color",
            },
            "minItems": 1,
            "type": "array",
          },
          "max": {
            "description": "The maximum value to render on the vertical axis.

If not specified, the maximum value is determined automatically based on the values given.",
            "type": "number",
          },
          "min": {
            "default": 0,
            "description": "The minimal value to render on the vertical axis.",
            "type": "number",
          },
          "step": {
            "description": "If specified, the Y-axis of the chart will be incremented by this fixed amount.

By default it’s detected automatically.",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "backgroundColors": {
        "description": "The background colors to use for each dataset by default.

If the length of this array exceeds the number of labels, the pattern will be repeated.

By default the primary color of the theme will be used.",
        "items": {
          "format": "remapper",
        },
        "minItems": 1,
        "type": "array",
      },
      "labelOptions": {
        "$ref": "#/definitions/LabelOptions",
        "description": "Configuration options for the labels on the horizontal axis.",
      },
      "labels": {
        "description": "The labels to display at the bottom of the chart.",
        "items": {
          "format": "remapper",
        },
        "minItems": 1,
        "type": "array",
      },
      "type": {
        "default": "line",
        "description": "The chart type to render by default.",
        "enum": [
          "bar",
          "line",
        ],
        "type": "string",
      },
      "yAxis": {
        "$ref": "#/definitions/YAxis",
        "description": "Configuration options for the vertical axis.",
      },
    },
    "required": [
      "type",
      "yAxis",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > control-buttons 1`] = `
{
  "actions": {
    "onBack": {
      "description": "This action gets triggered then the back button is clicked.

It will be called with the page data.",
    },
    "onForward": {
      "description": "This action gets triggered then the back button is clicked.

It will be called with the page data.",
    },
  },
  "events": undefined,
  "messages": {
    "back": {
      "description": "The label that’s used on the back button.",
    },
    "forward": {
      "description": "The label that’s used on the forward button.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Button": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.

By default a cared pointing left or right respectively will be rendered.",
            "format": "fontawesome",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "back": {
        "anyOf": [
          {
            "$ref": "#/definitions/Button",
          },
          {
            "const": false,
            "type": "boolean",
          },
        ],
        "description": "The configuration for the back button.

Set to \`false\` to hide back button.",
      },
      "forward": {
        "anyOf": [
          {
            "$ref": "#/definitions/Button",
          },
          {
            "const": false,
            "type": "boolean",
          },
        ],
        "description": "The configuration for the forward button.

Set to \`false\` to hide forward button.",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > data-loader 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "Action that gets dispatched when a new filter gets applied.

This also gets called during the initial load.",
    },
  },
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted once the \`onLoad\` action has finished.

It can be triggered again by sending a \`refresh\` event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "When received, the \`onLoad\` action will be triggered using the parameters passed through this
event, which in turn triggers the \`data\` emit event.",
      },
    },
  },
  "messages": {
    "loadErrorMessage": {
      "description": "The error message that should be shown when data failed to load.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "skipInitialLoad": {
        "description": "By default the \`onLoad\` action is triggered immediately.

By setting this to \`true\`, this won’t happen.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > data-notifier 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted when new data is available.",
      },
    },
    "listen": {
      "data": {
        "description": "The event to listen on for new data.",
      },
      "seed": {
        "description": "Set and emit the initial data.

This is useful for example in combination with the \`filter\` block.",
      },
    },
  },
  "messages": {
    "buttonLabel": {
      "description": "The label to display on the refresh button of the notification.",
    },
    "newMessage": {
      "description": "The message to display when new data is available.

This will be called with the \`count\` parameter, which refers to the amount of new items.",
    },
    "updatedMessage": {
      "description": "The message to display when existing data has been changed.

This will be called with the \`count\` parameter, which refers to the amount of changed items.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
    },
    "properties": {
      "color": {
        "$ref": "#/definitions/BulmaColor",
        "default": "dark",
        "description": "The Bulma color to use for the message and the refresh button.",
      },
      "id": {
        "default": "id",
        "description": "The property used to identify resources when comparing them in case of array data.",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > detail-viewer 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AssetMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on an existing asset.",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "asset": {
            "description": "The id of an asset to use.",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "asset",
        ],
        "type": "object",
      },
      "BulletPoints": {
        "additionalProperties": false,
        "description": "A group of fields showed in bullet points.",
        "properties": {
          "bulletType": {
            "default": "none",
            "description": "Bullet decoration for the list.",
            "enum": [
              "circle",
              "decimal-leading-zero",
              "decimal",
              "disc",
              "horizontal",
              "lower-alpha",
              "lower-roman",
              "none",
              "numbered",
              "square",
              "upper-alpha",
              "upper-roman",
            ],
            "type": "string",
          },
          "bullets": {
            "additionalProperties": false,
            "description": "Each bullet contains a heading and description.",
            "properties": {
              "description": {
                "$ref": "#/definitions/Field",
              },
              "heading": {
                "$ref": "#/definitions/Field",
              },
            },
            "required": [
              "heading",
            ],
            "type": "object",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "bullets",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/FileField",
          },
          {
            "$ref": "#/definitions/GeoCoordinatesField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
          {
            "$ref": "#/definitions/VideoField",
          },
        ],
        "description": "All supported types of fields.",
      },
      "FieldGroup": {
        "additionalProperties": false,
        "description": "A group of fields that is repeated for each item in it value.",
        "properties": {
          "fields": {
            "description": "The list of fields to repeat.",
            "items": {
              "$ref": "#/definitions/Field",
            },
            "type": "array",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "fields",
        ],
        "type": "object",
      },
      "FileField": {
        "additionalProperties": false,
        "description": "Displays files as images.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "repeated": {
            "description": "Display one or multiple files.",
            "type": "boolean",
          },
          "repeatedName": {
            "description": "The name of the property of the data to fetch from within each item.

If not set, the item itself is used as the url.",
            "format": "remapper",
          },
          "rounded": {
            "description": "Is image rounded.",
            "type": "boolean",
          },
          "size": {
            "default": 48,
            "description": "The image is scaled with bulma sizes.",
            "enum": [
              16,
              24,
              32,
              48,
              64,
              96,
              128,
            ],
            "type": "number",
          },
          "type": {
            "const": "file",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "FontAwesomeMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color to apply to the icon.",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
            "format": "fontawesome",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "GeoCoordinatesField": {
        "additionalProperties": false,
        "description": "Displays a map with a marker.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "latitude": {
            "description": "The name of the field used to access the longitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The name of the field used to access the latitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "type": {
            "const": "geocoordinates",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The path to base the longitude and latitude fields from.

If \`fields[].latitude\` and \`fields[].longitude\` are not set it defaults to \`fields[].name.lat\` and \`fields[].name.lng\`.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "description": "Displays the content as regular text.

If the content is an object it will be converted using \`JSON.stringify()\`.",
        "properties": {
          "icon": {
            "description": "The icon to be used.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "type": {
            "const": "string",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
      "VideoField": {
        "additionalProperties": false,
        "description": "Allows render video.",
        "properties": {
          "height": {
            "default": 350,
            "description": "Height of the video element.",
            "type": "number",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "platform": {
            "description": "Other platform the video is taken from.",
            "enum": [
              "vimeo",
              "youtube",
            ],
            "type": "string",
          },
          "thumbnail": {
            "description": "Image that will be there at the start of the video.",
            "format": "remapper",
          },
          "type": {
            "const": "video",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
          "width": {
            "default": 350,
            "description": "Width of the video element.",
            "type": "number",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields to display based on the name from the schema.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/BulletPoints",
            },
            {
              "$ref": "#/definitions/Field",
            },
            {
              "$ref": "#/definitions/FieldGroup",
            },
          ],
        },
        "type": "array",
      },
      "icons": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetMarkerIcon",
          },
          {
            "$ref": "#/definitions/FontAwesomeMarkerIcon",
          },
        ],
        "description": "Custom icon configuration for geocoordinate fields.",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > feed 1`] = `
{
  "actions": {
    "onAvatarClick": {
      "description": "Action that gets dispatched when a user clicks on an avatar.",
    },
    "onButtonClick": {
      "description": "Action that gets dispatched when the button is clicked.

The button won't display if this is not defined.",
    },
    "onLoadReply": {
      "description": "Action to retrieve replies, dispatched on every feed item.",
    },
    "onSubmitReply": {
      "description": "Action that gets dispatched when submitting a reply.

When submitting replies, the data will be structured
as an object containing \`parentId\` and \`content\`.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": {
    "anonymousLabel": {
      "description": "The name to display for replies without known user names.",
    },
    "emptyLabel": {
      "description": "The label that’s displayed when there are no feed items available.",
    },
    "replyErrorMessage": {
      "description": "The error message shown when an error occurs while submitting a reply.",
    },
    "replyLabel": {
      "description": "The placeholder text used for the reply input.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AssetMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on an existing asset.",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "asset": {
            "description": "The id of an asset to use.",
            "type": "string",
          },
          "latitude": {
            "description": "The latitude of the marker.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The longitude of the marker.",
            "format": "remapper",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "asset",
          "latitude",
          "longitude",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "FontAwesomeMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color to apply to the icon.",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
            "format": "fontawesome",
            "type": "string",
          },
          "latitude": {
            "description": "The latitude of the marker.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The longitude of the marker.",
            "format": "remapper",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "latitude",
          "longitude",
        ],
        "type": "object",
      },
      "Reply": {
        "additionalProperties": false,
        "properties": {
          "author": {
            "default": [
              {
                "prop": "$author",
              },
              {
                "prop": "name",
              },
            ],
            "description": "The author of the reply.",
            "format": "remapper",
          },
          "content": {
            "default": {
              "prop": "content",
            },
            "description": "The content of the reply.",
            "format": "remapper",
          },
          "parentId": {
            "description": "The field that is used to associate the ID of the resource this reply belongs to.",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "buttonLabel": {
        "description": "The text that displays inside the button.",
        "type": "string",
      },
      "description": {
        "description": "The description or content of the card.",
        "format": "remapper",
      },
      "heading": {
        "description": "The heading displayed on the card.",
        "format": "remapper",
      },
      "marker": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetMarkerIcon",
          },
          {
            "$ref": "#/definitions/FontAwesomeMarkerIcon",
          },
        ],
        "description": "The location marker that is displayed on the card.",
      },
      "picture": {
        "description": "The highlighted picture.",
        "format": "remapper",
      },
      "pictureBase": {
        "description": "The base URL used to display pictures.

If not defined, the Asset API will be used instead.",
        "type": "string",
      },
      "pictures": {
        "description": "A list of pictures that are displayed below the highlighted picture.",
        "format": "remapper",
      },
      "reply": {
        "$ref": "#/definitions/Reply",
        "description": "The definition used to display replies.",
      },
      "subtitle": {
        "description": "The subtitle displayed on the card.",
        "format": "remapper",
      },
      "title": {
        "description": "The title displayed on the card.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > filter 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "The action to dispatch to load data. Typically this is a \`resource.query\` action.",
    },
  },
  "events": {
    "emit": {
      "filtered": {
        "description": "This event is emitted when new data is available because of a user interaction with filters.",
      },
      "refreshed": {
        "description": "This event is emitted when new data is available because of a refresh event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "Force reload data using the current filters.",
      },
    },
  },
  "messages": {
    "clearLabel": {
      "description": "The label of the clear button.",
    },
    "modalTitle": {
      "description": "The title of the modal.",
    },
    "submitLabel": {
      "description": "The label of the filter button.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AbstractField<"date",string>": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "date",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "BooleanField": {
        "additionalProperties": false,
        "description": "A checkbox that returns \`true\` when checked and \`false\` when not.",
        "properties": {
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "description": "The color of the checkbox.",
          },
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "labelText": {
            "description": "The color of the checkbox.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "default": "normal",
            "description": "The size of the checkbox.",
          },
          "switch": {
            "additionalProperties": false,
            "description": "Whether the checkbox should display as a switch instead.",
            "properties": {
              "outlined": {
                "description": "Whether the outlined style should be used.",
                "type": "boolean",
              },
              "rounded": {
                "description": "Whether the rounded style should be used.",
                "type": "boolean",
              },
              "thin": {
                "description": "Whether the thin style should be used.",
                "type": "boolean",
              },
            },
            "type": "object",
          },
          "type": {
            "const": "boolean",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "ButtonOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "An icon to render on the button.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "User-facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "required": [
          "value",
          "icon",
        ],
        "type": "object",
      },
      "ButtonsField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "options": {
            "description": "A list of button options.",
            "items": {
              "$ref": "#/definitions/ButtonOption",
            },
            "type": "array",
          },
          "type": {
            "const": "buttons",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "options",
          "type",
        ],
        "type": "object",
      },
      "DateField": {
        "$ref": "#/definitions/AbstractField%3C%22date%22%2Cstring%3E",
      },
      "DateRangeField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "fromLabel": {
            "description": "The label to render on the \`from\` field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "toLabel": {
            "description": "The label to render on the \`to\` field.",
            "format": "remapper",
          },
          "type": {
            "const": "date-range",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "enum": {
            "description": "A list of enum options.",
            "items": {
              "$ref": "#/definitions/EnumOption",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "enum",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "enum",
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumOption": {
        "additionalProperties": false,
        "properties": {
          "label": {
            "description": "User facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "type": "object",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/BooleanField",
          },
          {
            "$ref": "#/definitions/ButtonsField",
          },
          {
            "$ref": "#/definitions/DateField",
          },
          {
            "$ref": "#/definitions/DateRangeField",
          },
          {
            "$ref": "#/definitions/EnumField",
          },
          {
            "$ref": "#/definitions/ListField",
          },
          {
            "$ref": "#/definitions/RangeField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
      },
      "ListField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "list": {
            "description": "A list of enum options.",
            "items": {
              "$ref": "#/definitions/EnumOption",
            },
            "type": "array",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "list",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "list",
          "name",
          "type",
        ],
        "type": "object",
      },
      "RangeField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "from": {
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "to": {
            "format": "remapper",
          },
          "type": {
            "const": "range",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "exact": {
            "description": "By default string fields search for fields containing the user input.

By setting this to true, an exact match is used.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "string",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields the user is allowed to search on.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "fullscreen": {
        "default": false,
        "description": "Whether the modal should fill the whole page or not.",
        "type": "boolean",
      },
      "highlight": {
        "anyOf": [
          {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          {
            "type": "string",
          },
        ],
        "description": "The name of a field to highlight.

This means this field will be displayed directly on the screen instead of in the modal.",
      },
      "icon": {
        "default": "filter",
        "description": "The name of the fontawesome icon to display on the button to open the filter modal.",
        "format": "fontawesome",
        "type": "string",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > form 1`] = `
{
  "actions": {
    "$any": {
      "description": "A custom action that gets dispatched when checking form requirements.",
    },
    "onPrevious": {
      "description": "Action that gets dispatched when the previous button is clicked.",
    },
    "onSubmit": {
      "description": "Action that gets dispatched when the form is submitted.",
    },
  },
  "events": {
    "emit": {
      "change": {
        "description": "This event is emitted every time a change is made to the form.

The data received in the entire form data.",
      },
    },
    "listen": {
      "$any": {
        "description": "Custom event listeners that can be used to receive data for specific types of form fields.",
      },
      "data": {
        "description": "An event that can be used to receive data.

Compatible data that is received will be displayed and mapped to the fields as defined in the
\`fields\` parameter.

\`keepData\` will retain the previous set of values if set to \`true\`

\`initialValues\` as a mapping of key-value pairs
will be merged with the new fields’ default values.",
      },
      "fields": {
        "description": "An event that can be used to dynamically replace the form’s fields.

Include an array of fields in \`fields\` to replace the current list of fields in the block.",
      },
    },
  },
  "messages": {
    "confirmLabel": {
      "description": undefined,
    },
    "fieldErrorLabel": {
      "description": undefined,
    },
    "formRequirementError": {
      "description": undefined,
    },
    "invalidLabel": {
      "description": undefined,
    },
    "optionalLabel": {
      "description": undefined,
    },
    "previousLabel": {
      "description": undefined,
    },
    "selectionNoOptions": {
      "description": undefined,
    },
    "selectionOptionsError": {
      "description": undefined,
    },
    "submitError": {
      "description": undefined,
    },
    "submitLabel": {
      "description": undefined,
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AcceptRequirement": {
        "additionalProperties": false,
        "properties": {
          "accept": {
            "description": "The list of accepted [MIME-types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types).",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
        },
        "required": [
          "accept",
        ],
        "type": "object",
      },
      "ActionEnumField": {
        "additionalProperties": false,
        "description": "A dropdown list containing a list of values based on the output of an action.",
        "properties": {
          "action": {
            "description": "This action will be fired to fetch dynamic enum options.

The action should return an array of objects that contain the \`label\` and \`value\` property.",
            "format": "action",
            "type": "string",
          },
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "loadError": {
            "default": "Error loading options",
            "description": "This message is displayed if the options failed to load.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "enum",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "action",
          "name",
          "type",
        ],
        "type": "object",
      },
      "BooleanField": {
        "additionalProperties": false,
        "description": "A checkbox that returns \`true\` when checked and \`false\` when not.",
        "properties": {
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "description": "The color of the checkbox.",
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "boolean",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "labelText": {
            "description": "The text to display next to the checkbox.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.

This typically means that the checkbox *must* be checked.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "default": "normal",
            "description": "The size of the checkbox.",
          },
          "switch": {
            "additionalProperties": false,
            "description": "Whether the checkbox should display as a switch instead.",
            "properties": {
              "outlined": {
                "description": "Whether the outlined style should be used.",
                "type": "boolean",
              },
              "rounded": {
                "description": "Whether the rounded style should be used.",
                "type": "boolean",
              },
              "thin": {
                "description": "Whether the thin style should be used.",
                "type": "boolean",
              },
            },
            "type": "object",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "boolean",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Choice": {
        "additionalProperties": false,
        "description": "An option that is displayed in a dropdown menu or radio button field.",
        "properties": {
          "disabled": {
            "default": false,
            "description": "If true, the choice will be disabled.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed in the option.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label used to display the option.",
            "format": "remapper",
          },
          "value": {
            "$ref": "#/definitions/JsonValue",
            "description": "The value to use when selecting the option.",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
      "CountRequirement": {
        "additionalProperties": false,
        "description": "A requirement used to enforce the length or amount of items in the input.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "maxItems": {
            "description": "The maximum number of items.",
            "minimum": 1,
            "type": "number",
          },
          "minItems": {
            "description": "The minimum number of items.",
            "minimum": 1,
            "type": "number",
          },
        },
        "type": "object",
      },
      "DateField": {
        "additionalProperties": false,
        "description": "A date/time picker that results in an exact date and time.",
        "properties": {
          "allowInput": {
            "default": false,
            "description": "Whether typing input in date field is allowed",
            "type": "boolean",
          },
          "altFormat": {
            "default": "Y-m-d",
            "description": "The accepted alternative format of the date field when typing in the input.",
            "type": "string",
          },
          "altInput": {
            "default": false,
            "description": "Whether to use the alternative format as the allowed format that the user has to follow when typing in a date.",
            "type": "boolean",
          },
          "confirm": {
            "default": false,
            "description": "Whether the confirm button should be shown",
            "type": "boolean",
          },
          "dateFormat": {
            "description": "The remapper used for formatting the date value’s label.

The date value can be accessed using the \`root\` remapper.",
            "format": "remapper",
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "string",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "All requirements that are applicable to this type of field.",
            "items": {
              "$ref": "#/definitions/DateTimeRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "startOfWeek": {
            "default": 1,
            "description": "The day to display as the first day of the week.

0 means Sunday, 1 means Monday, etc.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
            ],
            "type": "number",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "date",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "DateTimeField": {
        "additionalProperties": false,
        "description": "A date/time picker that results in an exact date and time.",
        "properties": {
          "allowInput": {
            "default": false,
            "description": "Whether typing input in date field is allowed",
            "type": "boolean",
          },
          "altFormat": {
            "default": "Y-m-d",
            "description": "The accepted alternative format of the date field when typing in the input.",
            "type": "string",
          },
          "altInput": {
            "default": false,
            "description": "Whether to use the alternative format as the allowed format that the user has to follow when typing in a date.",
            "type": "boolean",
          },
          "confirm": {
            "default": false,
            "description": "Whether the confirm button should be shown",
            "type": "boolean",
          },
          "dateFormat": {
            "description": "The remapper used for formatting the date value’s label.

The date value can be accessed using the \`root\` remapper.",
            "format": "remapper",
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "string",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "minuteIncrement": {
            "default": 5,
            "description": "The minute increment when pressing the up or down arrows on the time picker.",
            "minimum": 1,
            "type": "number",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "All requirements that are applicable to this type of field.",
            "items": {
              "$ref": "#/definitions/DateTimeRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "startOfWeek": {
            "default": 1,
            "description": "The day to display as the first day of the week.

0 means sunday, 1 means monday, etc.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
            ],
            "type": "number",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "date-time",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "DateTimeRequirement": {
        "anyOf": [
          {
            "$ref": "#/definitions/EnabledDayRequirement",
          },
          {
            "$ref": "#/definitions/RangeRequirement",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
          {
            "$ref": "#/definitions/TimeRangeRequirement",
          },
        ],
        "description": "All requirements applicable to date-time fields.",
      },
      "EnabledDayRequirement": {
        "additionalProperties": false,
        "description": "A requirement that can be used to disable specific days.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "friday": {
            "default": true,
            "description": "Whether Fridays should be selectable.",
            "type": "boolean",
          },
          "monday": {
            "default": true,
            "description": "Whether Mondays should be selectable.",
            "type": "boolean",
          },
          "saturday": {
            "default": true,
            "description": "Whether Saturdays should be selectable.",
            "type": "boolean",
          },
          "sunday": {
            "default": true,
            "description": "Whether Sundays should be selectable.",
            "type": "boolean",
          },
          "thursday": {
            "default": true,
            "description": "Whether Thursdays should be selectable.",
            "type": "boolean",
          },
          "tuesday": {
            "default": true,
            "description": "Whether Tuesdays should be selectable.",
            "type": "boolean",
          },
          "wednesday": {
            "default": true,
            "description": "Whether Wednesdays should be selectable.",
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "EnumField": {
        "anyOf": [
          {
            "$ref": "#/definitions/ActionEnumField",
          },
          {
            "$ref": "#/definitions/EventEnumField",
          },
          {
            "$ref": "#/definitions/SyncEnumField",
          },
        ],
      },
      "EventEnumField": {
        "additionalProperties": false,
        "description": "A dropdown list containing a list of values based on the output of an event.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "event": {
            "description": "Wait until an event has been fired containing the list of options.

The event should return an array of objects that contain the \`label\` and \`value\` property.",
            "format": "event-listener",
            "type": "string",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "loadError": {
            "default": "Error loading options",
            "description": "This message is displayed if the options failed to load.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "enum",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "event",
          "name",
          "type",
        ],
        "type": "object",
      },
      "EventListField": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "event": {
            "description": "Wait until an event has been fired containing the list of options. The event should return an array of objects that contain the \`label\` and \`value\` property.",
            "format": "event-listener",
            "type": "string",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "list",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "event",
          "name",
          "type",
        ],
        "type": "object",
      },
      "EventSelectionField": {
        "additionalProperties": false,
        "properties": {
          "addLabel": {
            "default": "Add",
            "description": "The label to show on the button for adding a new entry.",
            "format": "remapper",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "event": {
            "description": "Wait until an event has been fired containing the list of options. The event should return an array of objects.",
            "format": "event-listener",
            "type": "string",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/SelectionRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "selection",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "event",
          "name",
          "type",
        ],
        "type": "object",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/BooleanField",
          },
          {
            "$ref": "#/definitions/DateField",
          },
          {
            "$ref": "#/definitions/DateTimeField",
          },
          {
            "$ref": "#/definitions/EnumField",
          },
          {
            "$ref": "#/definitions/Fieldset",
          },
          {
            "$ref": "#/definitions/FileField",
          },
          {
            "$ref": "#/definitions/GeoCoordinatesField",
          },
          {
            "$ref": "#/definitions/HiddenField",
          },
          {
            "$ref": "#/definitions/ListField",
          },
          {
            "$ref": "#/definitions/NumberField",
          },
          {
            "$ref": "#/definitions/RadioField",
          },
          {
            "$ref": "#/definitions/RangeField",
          },
          {
            "$ref": "#/definitions/SelectionField",
          },
          {
            "$ref": "#/definitions/StaticField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
          {
            "$ref": "#/definitions/TagsField",
          },
        ],
      },
      "Fieldset": {
        "additionalProperties": false,
        "properties": {
          "addLabel": {
            "default": "Add",
            "description": "The label to show on the button for adding a new entry for repeated fields.",
            "format": "remapper",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "fields": {
            "description": "The fields contained by this fieldset.",
            "items": {
              "$ref": "#/definitions/Field",
            },
            "minItems": 1,
            "type": "array",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "removeLabel": {
            "default": "Remove",
            "description": "The label to show on the button for removing an entry for repeated fields.",
            "format": "remapper",
          },
          "repeated": {
            "description": "If true, this fieldset represents an array of objects.",
            "type": "boolean",
          },
          "requirements": {
            "description": "Requirements that are applicable to a fieldset.",
            "items": {
              "$ref": "#/definitions/FieldsetRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "fieldset",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "fields",
          "name",
          "type",
        ],
        "type": "object",
      },
      "FieldsetRequirement": {
        "$ref": "#/definitions/LengthRequirement",
        "description": "All requirements applicable to fieldsets.",
      },
      "FileField": {
        "additionalProperties": false,
        "description": "An input field used to upload files.",
        "properties": {
          "defaultValue": {
            "description": "The default value for the field.",
            "type": "string",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "emptyFileLabel": {
            "default": " ",
            "description": "The label that is shown for empty files.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "maxHeight": {
            "description": "The maximum height of uploaded files.",
            "type": "number",
          },
          "maxSize": {
            "description": "The maximum size of uploaded files.",
            "type": "number",
          },
          "maxWidth": {
            "description": "The maximum width of uploaded files.",
            "type": "number",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "quality": {
            "description": "The quality modifier to use when uploading images, in percentages.",
            "type": "number",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "repeated": {
            "default": false,
            "description": "Boolean value representing whether to accept one file or multiple files.",
            "type": "boolean",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/FileRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "file",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "FileRequirement": {
        "anyOf": [
          {
            "$ref": "#/definitions/AcceptRequirement",
          },
          {
            "$ref": "#/definitions/LengthRequirement",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
          {
            "$ref": "#/definitions/SizeRequirement",
          },
        ],
        "description": "All requirements applicable to file fields.",
      },
      "FormDisplay": {
        "enum": [
          "flex",
          "grid",
        ],
        "type": "string",
      },
      "FormRequirement": {
        "additionalProperties": false,
        "properties": {
          "action": {
            "description": "The name of the action to trigger when the requirement is checked.",
            "format": "action",
            "type": "string",
          },
          "alwaysValidate": {
            "description": "Whether the field should always be validated even if the previous value was valid and hasn’t changed.",
            "type": "boolean",
          },
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "isValid": {
            "description": "The list of fields that must be valid before running the requirement action.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "isValid",
          "action",
        ],
        "type": "object",
      },
      "GeoCoordinatesField": {
        "additionalProperties": false,
        "description": "A location picker used to select a location.",
        "properties": {
          "defaultLocation": {
            "default": [
              51.476852,
              0,
            ],
            "description": "The location (latitude, longitude) to default to when the user’s location cannot be found.

This can be used to set the location to something that is more relevant to the user.",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "defaultValue": {
            "$ref": "#/definitions/Record%3Cstring%2Cnumber%3E",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "locationError": {
            "default": "Couldn’t find your location. Are location services enabled?",
            "description": "The error message to display when the location couldn’t be determined.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/GeocoordinateRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "geocoordinates",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "GeocoordinateRequirement": {
        "$ref": "#/definitions/RequiredRequirement",
      },
      "HiddenField": {
        "additionalProperties": false,
        "description": "A hidden field. This is useful for submitting default values the user may not change.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "hidden",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "Image": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "default": "default",
            "description": "The alignment of the text content.",
            "enum": [
              "default",
              "header",
            ],
            "type": "string",
          },
          "alt": {
            "description": "The alt text of the image.",
            "format": "remapper",
          },
          "file": {
            "description": "The image to show in the cell.

image can either be url or uploaded image",
            "format": "remapper",
          },
          "rounded": {
            "description": "Is image rounded.",
            "type": "boolean",
          },
          "size": {
            "default": 48,
            "description": "The image is scaled with bulma sizes.",
            "enum": [
              16,
              24,
              32,
              48,
              64,
              96,
              128,
            ],
            "type": "number",
          },
        },
        "required": [
          "file",
        ],
        "type": "object",
      },
      "JsonValue": {
        "anyOf": [
          {
            "items": {
              "$ref": "#/definitions/JsonValue",
            },
            "type": "array",
          },
          {
            "type": "boolean",
          },
          {
            "type": "number",
          },
          {
            "type": "string",
          },
          {
            "additionalProperties": {
              "$ref": "#/definitions/JsonValue",
            },
            "type": "object",
          },
          {
            "type": "null",
          },
        ],
      },
      "LengthRequirement": {
        "additionalProperties": false,
        "description": "A requirement used to enforce the length or amount of items in the input.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "maxLength": {
            "description": "The maximum length.",
            "minimum": 1,
            "type": "number",
          },
          "minLength": {
            "description": "The minimum length.",
            "minimum": 1,
            "type": "number",
          },
        },
        "type": "object",
      },
      "ListField": {
        "anyOf": [
          {
            "$ref": "#/definitions/EventListField",
          },
          {
            "$ref": "#/definitions/SyncListField",
          },
        ],
      },
      "MinMaxRequirement": {
        "additionalProperties": false,
        "description": "Minimum and maximum form requirements for number fields.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "max": {
            "description": "The maximum value of the field.",
            "type": "number",
          },
          "min": {
            "description": "The minimum value of the field.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "NumberField": {
        "additionalProperties": false,
        "description": "A number entry field.",
        "properties": {
          "bottomLabels": {
            "description": "If \`display\` is set to \`slider\`, these labels are displayed evenly spaced below the slider.",
            "items": {
              "format": "remapper",
            },
            "minItems": 2,
            "type": "array",
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "number",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "display": {
            "const": "slider",
            "description": "How to display the numeric field.

By default a \`number\` input field is displayed.",
            "type": "string",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/NumberRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "topLabels": {
            "description": "If \`display\` is set to \`slider\`, these labels are displayed evenly spaced on top of the slider.",
            "items": {
              "format": "remapper",
            },
            "minItems": 2,
            "type": "array",
          },
          "type": {
            "description": "The type of the field.",
            "enum": [
              "integer",
              "number",
            ],
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "NumberRequirement": {
        "anyOf": [
          {
            "$ref": "#/definitions/MinMaxRequirement",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
          {
            "$ref": "#/definitions/StepRequirement",
          },
        ],
        "description": "All requirements applicable to number fields.",
      },
      "RadioField": {
        "additionalProperties": false,
        "description": "A radio button that returns the associated value when selected.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "options": {
            "description": "The list of options the user can select from.",
            "items": {
              "$ref": "#/definitions/Choice",
            },
            "type": "array",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "radio",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "RangeField": {
        "additionalProperties": false,
        "properties": {
          "bottomLabels": {
            "description": "If \`display\` is set to \`slider\`, these labels are displayed evenly spaced below the slider.",
            "items": {
              "format": "remapper",
            },
            "minItems": 2,
            "type": "array",
          },
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "number",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "from": {
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/NumberRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "to": {
            "format": "remapper",
          },
          "topLabels": {
            "description": "If \`display\` is set to \`slider\`, these labels are displayed evenly spaced on top of the slider.",
            "items": {
              "format": "remapper",
            },
            "minItems": 2,
            "type": "array",
          },
          "type": {
            "const": "range",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "RangeRequirement": {
        "additionalProperties": false,
        "description": "A requirement used to enforce the range of available dates.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "from": {
            "description": "The minimum date that can be picked.",
            "format": "remapper",
          },
          "to": {
            "description": "The maximum date that can be picked.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
      "Record<string,number>": {
        "additionalProperties": {
          "type": "number",
        },
        "type": "object",
      },
      "RegexRequirement": {
        "additionalProperties": false,
        "description": "Requirement that matches using a given regex.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "flags": {
            "default": "g",
            "description": "The flags to use for the regex.

Supported values: \`g\`, \`m\`, \`i\`, \`y\`, \`u\`, \`s\`",
            "pattern": "^[gimsuy]+$",
            "type": "string",
          },
          "regex": {
            "description": "The regex to match with. Must be a valid JavaScript regex.",
            "type": "string",
          },
        },
        "required": [
          "regex",
        ],
        "type": "object",
      },
      "RequiredRequirement": {
        "additionalProperties": false,
        "description": "Requirement used to mark the field as required.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "required": {
            "description": "Whether the field is required.

We recommend passing a boolean value e.g. \`true\`.

Another option is to pass a remapper returning a boolean value. This way you can conditionally control if the field is required.",
            "format": "remapper",
          },
        },
        "required": [
          "required",
        ],
        "type": "object",
      },
      "SelectionChoice": {
        "additionalProperties": false,
        "description": "An option that is displayed in the dialog of a selection field.",
        "properties": {
          "fields": {
            "description": "A list of fields to display.",
            "items": {
              "$ref": "#/definitions/SelectionChoiceField",
            },
            "type": "array",
          },
          "header": {
            "description": "The header text to display above the list of fields.

Will not render if undefined.",
            "format": "remapper",
          },
          "icon": {
            "description": "The icon that displays in front of the header.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "id": {
            "description": "The unique identifier for the choice.",
            "type": "number",
          },
          "image": {
            "$ref": "#/definitions/Image",
            "description": "The image that is shown to the left of the list item.

This can be either a full image path or an asset id.",
          },
          "imageInline": {
            "description": "Nests image on the left inside the inline block.",
            "type": "boolean",
          },
        },
        "required": [
          "id",
        ],
        "type": "object",
      },
      "SelectionChoiceField": {
        "additionalProperties": false,
        "description": "An object representing how a data field should be displayed.",
        "properties": {
          "icon": {
            "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to display in front of the label.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "value": {
            "description": "The name of the field to read from to determine the value to show.

No value will be rendered if undefined.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
      "SelectionField": {
        "anyOf": [
          {
            "$ref": "#/definitions/EventSelectionField",
          },
          {
            "$ref": "#/definitions/SyncSelectionField",
          },
        ],
      },
      "SelectionRequirement": {
        "$ref": "#/definitions/CountRequirement",
        "description": "All requirements applicable to string fields.",
      },
      "SizeRequirement": {
        "additionalProperties": false,
        "description": "A requirement used to enforce the size of the input.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "maxSize": {
            "description": "The maximum size in bytes.",
            "minimum": 1,
            "type": "number",
          },
          "minSize": {
            "description": "The minimum size in bytes.",
            "minimum": 1,
            "type": "number",
          },
        },
        "type": "object",
      },
      "StaticField": {
        "additionalProperties": false,
        "description": "A field that displays static content.

This field does not contain a name or a value.",
        "properties": {
          "content": {
            "description": "The content to display.",
            "format": "remapper",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "static",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "content",
          "name",
          "type",
        ],
        "type": "object",
      },
      "StepRequirement": {
        "additionalProperties": false,
        "description": "Requirement used to indicate how big a step should be for the field.

Note that for \`integer\` type fields are rounded _down_.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "step": {
            "description": "The amount to increment or decrement when using the stepper buttons of the field.",
            "type": "number",
          },
        },
        "required": [
          "step",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "description": "Fields with the type of [\`string\`](#StringField) support requirements. This is an array of requirements that are used to validate the value the user inputs. Each requirement can be provided with its own custom error message, allowing for better feedback towards users.

For example, the [\`regex\`](#RegexRequirement) requirement type allows you to validate a field using [Regular Expressions](https://learnxinyminutes.com/docs/pcre/). So for example if you want a string field that requires a field to be an email address that ends with “@appsemble.com”, you could enforce this like so:

\`\`\`yaml type: string requirements:   - regex: \\w+@appsemble\\.com     errorMessage: Value does not end with “@appsemble.com” \`\`\`",
        "properties": {
          "defaultValue": {
            "description": "The default value of the field.",
            "type": "string",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "format": {
            "description": "The format to use for validation.",
            "enum": [
              "email",
              "password",
              "url",
            ],
            "type": "string",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "multiline": {
            "default": false,
            "description": "Whether the string field should be multiline or not.",
            "type": "boolean",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/StringRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "string",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "StringRequirement": {
        "anyOf": [
          {
            "$ref": "#/definitions/LengthRequirement",
          },
          {
            "$ref": "#/definitions/RegexRequirement",
          },
          {
            "$ref": "#/definitions/RequiredRequirement",
          },
        ],
        "description": "All requirements applicable to string fields.",
      },
      "SyncEnumField": {
        "additionalProperties": false,
        "description": "A dropdown list containing a list of predetermined values.",
        "properties": {
          "defaultValue": {
            "$ref": "#/definitions/JsonValue",
            "description": "The default value of the field.",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "enum": {
            "description": "The list of available choices.",
            "items": {
              "$ref": "#/definitions/Choice",
            },
            "type": "array",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "enum",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "enum",
          "name",
          "type",
        ],
        "type": "object",
      },
      "SyncListField": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "list": {
            "description": "A list of enum options.",
            "items": {
              "$ref": "#/definitions/Choice",
            },
            "type": "array",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/RequiredRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "list",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "list",
          "name",
          "type",
        ],
        "type": "object",
      },
      "SyncSelectionField": {
        "additionalProperties": false,
        "properties": {
          "addLabel": {
            "default": "Add",
            "description": "The label to show on the button for adding a new entry.",
            "format": "remapper",
          },
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/SelectionRequirement",
            },
            "type": "array",
          },
          "selection": {
            "description": "A list of selection options.",
            "items": {
              "$ref": "#/definitions/SelectionChoice",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "selection",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "selection",
          "type",
        ],
        "type": "object",
      },
      "TagsField": {
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "default": false,
            "description": "Whether the field should always be be disabled.",
            "format": "remapper",
          },
          "help": {
            "description": "A description for the text field. For adding more information about the field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "inline": {
            "const": true,
            "description": "Combines fields on the same row.

Fields are combined in order if set to true.",
            "type": "boolean",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name used when storing this field.",
            "type": "string",
          },
          "placeholder": {
            "description": "The placeholder to display when the field is empty.",
            "format": "remapper",
          },
          "readOnly": {
            "default": false,
            "description": "Whether the field should be read-only.",
            "format": "remapper",
          },
          "requirements": {
            "description": "The requirements that are used to validate the field with.

These are evaluated in the order they are defined in.",
            "items": {
              "$ref": "#/definitions/TagsRequirement",
            },
            "type": "array",
          },
          "show": {
            "description": "Displays field only if condition is true.

If not specified, the field will display.",
            "format": "remapper",
          },
          "tag": {
            "description": "The label that is shown to the right of the label.

Replaces the optional label if the field is optional. Won’t display if the field has no label of its own.",
            "format": "remapper",
          },
          "type": {
            "const": "tags",
            "description": "The type of the field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "TagsRequirement": {
        "anyOf": [
          {
            "$ref": "#/definitions/CountRequirement",
          },
          {
            "$ref": "#/definitions/MinMaxRequirement",
          },
          {
            "$ref": "#/definitions/RegexRequirement",
          },
        ],
        "description": "All requirements applicable to string fields.",
      },
      "TimeRangeRequirement": {
        "additionalProperties": false,
        "description": "A requirement used to enforce the range of available times.",
        "properties": {
          "errorMessage": {
            "description": "The error message that is displayed when the requirement is not met.",
            "format": "remapper",
          },
          "maxTime": {
            "default": "23:59",
            "description": "The maximum time that can be selected.",
            "examples": [
              "15:20",
            ],
            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
            "type": "string",
          },
          "minTime": {
            "default": "00:00",
            "description": "The minimum time that can be selected.",
            "examples": [
              "15:20",
            ],
            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
            "type": "string",
          },
        },
        "required": [
          "minTime",
          "maxTime",
        ],
        "type": "object",
      },
    },
    "properties": {
      "autofill": {
        "additionalProperties": false,
        "description": "This allows you to update fields automatically with actions by typing in a selected field.

To authenticate with an external API see [Services](../../../docs/03-guide/service)",
        "properties": {
          "action": {
            "description": "The name of the action to trigger when the selected field values are changed.

The final output of the action(s) will get applied to the form fields.",
            "format": "action",
            "type": "string",
          },
          "delay": {
            "default": 1000,
            "description": "Set how many \`milliseconds\` it must take between input changes to call the action.",
            "type": "number",
          },
          "names": {
            "description": "The names of the fields for which to detect changes.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "action",
          "names",
        ],
        "type": "object",
      },
      "dense": {
        "default": true,
        "description": "Whether or not space should be reserved for the help text.

If this is left as \`true\`, any help text appearing will cause the form input to jump around due to layout changes.",
        "type": "boolean",
      },
      "disableDefault": {
        "default": false,
        "description": "Whether or not to disable populating fields with default data values.

If this is set to \`true\`, the default values for the fields won't contain data from [page storage](../../../docs/03-guide/storage#app-storage).",
        "type": "boolean",
      },
      "disabled": {
        "default": false,
        "description": "If this remapper yields true, the submit button will be disabled.",
        "format": "remapper",
      },
      "display": {
        "$ref": "#/definitions/FormDisplay",
        "default": "flex",
        "description": "How the form fields should be displayed.",
      },
      "fields": {
        "description": "A list of objects describing each field that can be entered in the form.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "minItems": 1,
        "type": "array",
      },
      "fullWidth": {
        "default": false,
        "description": "Weather the form should take up all available width on the page.",
        "type": "boolean",
      },
      "previous": {
        "description": "Whether the previous button should be shown.",
        "type": "boolean",
      },
      "requirements": {
        "description": "A list of requirements that are checked across all of the form data.",
        "items": {
          "$ref": "#/definitions/FormRequirement",
        },
        "type": "array",
      },
      "skipInitialLoad": {
        "description": "By default the form block will wait until event data is received.

By setting this to \`true\`, this won’t happen.",
        "type": "boolean",
      },
      "title": {
        "description": "Specify a form title",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > html 1`] = `
{
  "actions": {
    "$any": {
      "description": "Any custom action.
These can be used on \`<button>\`, \`<a>\`, and \`<input>\` elements using \`data-click\`.

If no corresponding \`data-click\` attribute can be found
the action will be considered unused and invalid.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Data that can be used in the placeholder remappers.

All elements specifying \`data-content\` will be updated each time this event is received.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Record<string,Remapper>": {
        "additionalProperties": {
          "format": "remapper",
        },
        "type": "object",
      },
    },
    "properties": {
      "content": {
        "description": "The HTML to render.",
        "type": "string",
      },
      "placeholders": {
        "$ref": "#/definitions/Record%3Cstring%2CRemapper%3E",
        "description": "The placeholders that are injected on elements with the \`data-content\` property.",
      },
    },
    "required": [
      "content",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > image 1`] = `
{
  "actions": {
    "onChange": {
      "description": "The action that is triggered when changing image.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "alignment": {
        "default": "center",
        "description": "The alignment of image.",
        "enum": [
          "center",
          "left",
          "right",
        ],
        "type": "string",
      },
      "alt": {
        "description": "The alt text of the image.",
        "format": "remapper",
      },
      "defaultImage": {
        "description": "This image will load if url returns invalid or null value.",
        "format": "remapper",
      },
      "fullscreen": {
        "default": false,
        "description": "This image will be shown in full screen mode if image is clicked.",
        "type": "boolean",
      },
      "height": {
        "default": 250,
        "description": "The height of the image in pixels.",
        "type": "number",
      },
      "input": {
        "default": false,
        "description": "If true file can be uploaded from device.

Actions will work if input is true.",
        "type": "boolean",
      },
      "name": {
        "description": "The name used when storing image.

Needed when input is true

Value should be same as property name in resources where it is going to be stored.",
        "type": "string",
      },
      "rounded": {
        "default": false,
        "description": "Is image rounded.",
        "type": "boolean",
      },
      "url": {
        "description": "The Url or src of the image.",
        "format": "remapper",
      },
      "width": {
        "default": 250,
        "description": "The width of the image in pixels.",
        "type": "number",
      },
    },
    "required": [
      "url",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > list 1`] = `
{
  "actions": {
    "$any": {
      "description": "Custom action mapping.",
    },
    "onClick": {
      "description": "Action that gets triggered when clicking on a list item.

If defined, an indicator will show up to show that the list item has a click action.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed. Must be a set of data.",
      },
    },
  },
  "messages": {
    "error": {
      "description": "The text that is shown when something went wrong with fetching the data.",
    },
    "noData": {
      "description": "The text that is shown when no data was found.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Button": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "default": "top-right",
            "description": "How the button should be aligned.",
            "enum": [
              "bottom-right",
              "field",
              "top-right",
            ],
            "type": "string",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color of the button.",
          },
          "disabled": {
            "description": "Whether the button should be disabled.

If the resulting remapper value is truthy, the button will be disabled.",
            "format": "remapper",
          },
          "fullwidth": {
            "description": "Whether the button should be full width or not.

By default buttons only take up as much space as needed.",
            "type": "boolean",
          },
          "icon": {
            "description": "An optional FontAwesome icon to display inside of the button.",
            "format": "fontawesome",
            "type": "string",
          },
          "inverted": {
            "description": "Whether the text and background colors should be inverted.",
            "type": "boolean",
          },
          "label": {
            "description": "The label to display inside of the button.",
            "format": "remapper",
          },
          "light": {
            "description": "When set to true, the ‘light’ set of Bulma colors are used.",
            "type": "boolean",
          },
          "onClick": {
            "description": "The name of the action to trigger when clicking on this field.",
            "format": "action",
            "type": "string",
          },
          "outlined": {
            "description": "Whether the button should display its colors in the outlines.",
            "type": "boolean",
          },
          "rounded": {
            "description": "Whether the button should be rounded.",
            "type": "boolean",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "default": "normal",
            "description": "The size of the button.",
          },
          "title": {
            "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
      "Dropdown": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "default": "bottom-right",
            "description": "How the dropdown should be aligned.",
            "enum": [
              "bottom-right",
              "top-right",
            ],
            "type": "string",
          },
          "icon": {
            "description": "The icon to show in the dropdown button.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The text to show in the dropdown button.",
            "format": "remapper",
          },
          "options": {
            "description": "The list of options to display. Must have at least 1 option.",
            "items": {
              "$ref": "#/definitions/DropdownOption",
            },
            "minItems": 1,
            "type": "array",
          },
        },
        "required": [
          "options",
        ],
        "type": "object",
      },
      "DropdownOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "The icon to show in the option.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The text to show in the option.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The action that will be called when selecting this option.",
            "format": "action",
            "type": "string",
          },
        },
        "required": [
          "onClick",
        ],
        "type": "object",
      },
      "Field": {
        "additionalProperties": false,
        "description": "An object representing how a data field should be displayed.",
        "properties": {
          "icon": {
            "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to display in front of the label.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "value": {
            "description": "The name of the field to read from to determine the value to show.

No value will be rendered if undefined.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
      "Image": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "default": "default",
            "description": "The alignment of the text content.",
            "enum": [
              "default",
              "header",
            ],
            "type": "string",
          },
          "alt": {
            "description": "The alt text of the image.",
            "format": "remapper",
          },
          "file": {
            "description": "The image to show in the cell.

image can either be url or uploaded image",
            "format": "remapper",
          },
          "rounded": {
            "description": "Is image rounded.",
            "type": "boolean",
          },
          "size": {
            "default": 48,
            "description": "The image is scaled with bulma sizes.",
            "enum": [
              16,
              24,
              32,
              48,
              64,
              96,
              128,
            ],
            "type": "number",
          },
        },
        "required": [
          "file",
        ],
        "type": "object",
      },
      "ToggleButton": {
        "additionalProperties": false,
        "properties": {
          "falseButton": {
            "$ref": "#/definitions/Button",
            "description": "The button to show when value is set to false.",
          },
          "trueButton": {
            "$ref": "#/definitions/Button",
            "description": "The button to show when value is set to true.",
          },
          "value": {
            "description": "Value should be true or false.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
          "trueButton",
          "falseButton",
        ],
        "type": "object",
      },
    },
    "properties": {
      "base": {
        "description": "An optional name of the field that contains the data.

If not defined, received data will be treated as an array.",
        "type": "string",
      },
      "button": {
        "$ref": "#/definitions/Button",
        "description": "The definition of the contents and styling of the button.",
      },
      "collapsible": {
        "description": "Whether the list or the grouped lists should be collapsible.

Will show the title in the collapse button if this is true.",
        "type": "boolean",
      },
      "dropdown": {
        "$ref": "#/definitions/Dropdown",
        "description": "The definition of the contents and styling of the dropdown.",
      },
      "fields": {
        "description": "A list of fields to display.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "groupBy": {
        "description": "The property based on which the list should be split into multiple lists.",
        "type": "string",
      },
      "header": {
        "description": "The header text to display above the list of fields.

Will not render if undefined.",
        "format": "remapper",
      },
      "hideOnNoData": {
        "description": "Whether the list should be hidden if there is no data.

Will not hide if undefined.",
        "type": "boolean",
      },
      "icon": {
        "description": "The icon that displays in front of the header.

Will not render if undefined.",
        "format": "fontawesome",
        "type": "string",
      },
      "image": {
        "$ref": "#/definitions/Image",
        "description": "The image that is shown to the left of the list item.

This can be either a full image path or an asset id.",
      },
      "imageInline": {
        "description": "Nests image on the left inside the inline block.",
        "type": "boolean",
      },
      "startCollapsed": {
        "description": "Whether the list should start in a collapsed state.

Will only apply to the first list in grouped lists.",
        "type": "boolean",
      },
      "title": {
        "description": "The title to display above the list.",
        "format": "remapper",
      },
      "toggleButton": {
        "$ref": "#/definitions/ToggleButton",
        "description": "The definition of the contents and styling of the toggle button.",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > map 1`] = `
{
  "actions": {
    "onMarkerClick": {
      "description": "Action that gets dispatched when a marker is clicked.",
    },
  },
  "events": {
    "emit": {
      "move": {
        "description": "Event that gets emitted when moving the map around.

Will apply [OData filters](https://www.odata.org) to limit the range of items fetched. This
will be skipped if the move emit event is not defined.",
      },
    },
    "listen": {
      "center": {
        "description": "An event that can be triggered to center the map’s position to the user’s current location.",
      },
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed. Must be a set of data.",
      },
      "follow": {
        "description": "Toggles whether or not the map should follow the user’s location. Defaults to not following.

If the value is exactly \`true\` or \`false\`, the following state will be set to that value.
Otherwise, it will toggle between following and not following.",
      },
    },
  },
  "messages": {
    "locationError": {
      "description": "The error message to display when the location couldn’t be determined.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AssetMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on an existing asset.",
        "properties": {
          "activeRatio": {
            "default": 1,
            "description": "Enlarge an active marker with this ratio.

This modifier is applied if a marker matches the block data which may be received by the block context. For example, this is applied if a marker matches the data that was passed in from a link action.",
            "type": "number",
          },
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "asset": {
            "description": "The id of an asset to use.",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "asset",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "FontAwesomeMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
        "properties": {
          "activeRatio": {
            "default": 1,
            "description": "Enlarge an active marker with this ratio.

This modifier is applied if a marker matches the block data which may be received by the block context. For example, this is applied if a marker matches the data that was passed in from a link action.",
            "type": "number",
          },
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color to apply to the icon.",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
            "format": "fontawesome",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "defaultLocation": {
        "default": [
          51.476852,
          0,
        ],
        "description": "The location (latitude, longitude) to default to when the user’s location cannot be found.

This can be used to set the location to something that is more relevant to the user.",
        "items": {
          "type": "number",
        },
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "disableClustering": {
        "description": "Whether clustering should be disabled.

By default markers are clustered if they are too close to each other.",
        "type": "boolean",
      },
      "filterLatitudeName": {
        "default": "lat",
        "description": "The name of the latitude property in the resource.

These are used for filtering purposes.",
        "type": "string",
      },
      "filterLongitudeName": {
        "default": "lng",
        "description": "The name of the longitude property in the resource.

These are used for filtering purposes.",
        "type": "string",
      },
      "icons": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetMarkerIcon",
          },
          {
            "$ref": "#/definitions/FontAwesomeMarkerIcon",
          },
        ],
        "description": "Custom icon configuration.",
      },
      "latitude": {
        "description": "The remapper used to retrieve the latitude.",
        "format": "remapper",
      },
      "longitude": {
        "description": "The remapper used to retrieve the longitude.",
        "format": "remapper",
      },
      "maxClusterRadius": {
        "default": 80,
        "description": "The maximum radius that a cluster will cover from the central marker (in pixels).

Decreasing will make more, smaller clusters. One can also use a function that accepts the current map zoom and returns the maximum cluster radius in pixels.",
        "minimum": 1,
        "type": "number",
      },
    },
    "required": [
      "latitude",
      "longitude",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > markdown 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Data that can be used to populate \`content\` with dynamic content.

If defined, a loader will be shown until this event is triggered.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "alignment": {
        "default": "left",
        "description": "The alignment of the text content.",
        "enum": [
          "center",
          "left",
          "right",
        ],
        "type": "string",
      },
      "centered": {
        "description": "Whether or not the content should be centered.",
        "type": "boolean",
      },
      "content": {
        "description": "A string containing the [markdown content](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) to display.",
        "format": "remapper",
      },
    },
    "required": [
      "content",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > openai 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "response": {
        "description": "This event can be used to receive incoming data to display.",
      },
    },
  },
  "messages": {
    "empty": {
      "description": "This message is displayed if the data is empty.",
    },
    "error": {
      "description": "This message is displayed if there was a problem loading the data.",
    },
    "loading": {
      "description": "This message is displayed if no data has been loaded yet.",
    },
  },
  "parameters": undefined,
}
`;

exports[`getProjectImplementations > official blocks > qr-scan 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "foundQr": {
        "description": "Event that gets emitted once the qr scanner has identified and resolved a QR code.

foundQr event only holds the string of the QR.",
      },
    },
    "listen": undefined,
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "drawQr": {
        "default": false,
        "description": "If true, the block will draw a rectangle around the QR code when it’s found.",
        "type": "boolean",
      },
      "height": {
        "description": "Video element height",
        "type": "number",
      },
      "width": {
        "description": "Video element width",
        "type": "number",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > stats 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "On what event to listen for incoming data to display.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Field": {
        "additionalProperties": false,
        "description": "An object describing what a stats field looks like.",
        "properties": {
          "icon": {
            "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to render.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label to render.",
            "format": "remapper",
          },
          "value": {
            "description": "The value of the property to render.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
          "icon",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of objects describing what the stats should look like.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > table 1`] = `
{
  "actions": {
    "$any": {
      "description": "Custom action mapping.",
    },
    "onClick": {
      "description": "The default action that is triggered when clicking on a row.

This does not trigger if the field has a different action specified.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "Listener for data used to display data in the table.",
      },
    },
  },
  "messages": {
    "emptyMessage": {
      "description": "The message to display when the data to display is empty.",
    },
    "error": {
      "description": "The message to display when data could not be loaded.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Button": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "description": "Whether the content of the cell should be aligned left, right, or centered",
            "enum": [
              "center",
              "left",
              "right",
            ],
            "type": "string",
          },
          "button": {
            "additionalProperties": false,
            "description": "The definition of the contents and styling of the button.",
            "properties": {
              "color": {
                "$ref": "#/definitions/BulmaColor",
                "default": "primary",
                "description": "The color of the button.",
              },
              "disabled": {
                "description": "Whether the button should be disabled.

If the resulting remapper value is truthy, the button will be disabled.",
                "format": "remapper",
              },
              "fullwidth": {
                "description": "Whether the button should be full width or not.

By default buttons only take up as much space as needed.",
                "type": "boolean",
              },
              "icon": {
                "description": "An optional FontAwesome icon to display inside of the button.",
                "format": "fontawesome",
                "type": "string",
              },
              "inverted": {
                "description": "Whether the text and background colors should be inverted.",
                "type": "boolean",
              },
              "label": {
                "description": "The label to display inside of the button.",
                "format": "remapper",
              },
              "light": {
                "description": "When set to true, the ‘light’ set of Bulma colors are used.",
                "type": "boolean",
              },
              "outlined": {
                "description": "Whether the button should display its colors in the outlines.",
                "type": "boolean",
              },
              "rounded": {
                "description": "Whether the button should be rounded.",
                "type": "boolean",
              },
              "size": {
                "$ref": "#/definitions/BulmaSize",
                "default": "normal",
                "description": "The size of the button.",
              },
              "title": {
                "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
                "format": "remapper",
              },
            },
            "type": "object",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The name of the action to trigger when clicking on this field.",
            "format": "action",
            "type": "string",
          },
        },
        "required": [
          "button",
        ],
        "type": "object",
      },
      "Dropdown": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "description": "Whether the content of the cell should be aligned left, right, or centered",
            "enum": [
              "center",
              "left",
              "right",
            ],
            "type": "string",
          },
          "dropdown": {
            "additionalProperties": false,
            "properties": {
              "alignment": {
                "default": "right",
                "description": "How the dropdown should be aligned.",
                "enum": [
                  "left",
                  "right",
                ],
                "type": "string",
              },
              "icon": {
                "description": "The icon to show in the dropdown button.",
                "format": "fontawesome",
                "type": "string",
              },
              "label": {
                "description": "The text to show in the dropdown button.",
                "format": "remapper",
              },
              "options": {
                "description": "The list of options to display. Must have at least 1 option.",
                "items": {
                  "$ref": "#/definitions/DropdownOption",
                },
                "minItems": 1,
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
        },
        "required": [
          "dropdown",
        ],
        "type": "object",
      },
      "DropdownOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "The icon to show in the option.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The text to show in the option.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The action that will be called when selecting this option.",
            "format": "action",
            "type": "string",
          },
        },
        "required": [
          "onClick",
        ],
        "type": "object",
      },
      "Field": {
        "additionalProperties": false,
        "description": "Represents a column that should be displayed in the table.",
        "properties": {
          "alignment": {
            "description": "Whether the content of the cell should be aligned left, right, or centered",
            "enum": [
              "center",
              "left",
              "right",
            ],
            "type": "string",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
          "onClick": {
            "description": "The name of the action to trigger when clicking on this field.",
            "format": "action",
            "type": "string",
          },
          "value": {
            "description": "The value of the field.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
      "Image": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "description": "Whether the content of the cell should be aligned left, right, or centered",
            "enum": [
              "center",
              "left",
              "right",
            ],
            "type": "string",
          },
          "image": {
            "additionalProperties": false,
            "properties": {
              "file": {
                "description": "The image to show in the cell.

image can either be url or uploaded image",
                "format": "remapper",
              },
              "width": {
                "description": "The image is scaled to the specified width in pixels.",
                "type": "number",
              },
            },
            "required": [
              "file",
            ],
            "type": "object",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
        },
        "required": [
          "image",
        ],
        "type": "object",
      },
      "RepeatedField": {
        "additionalProperties": false,
        "description": "Repeated fields based on an input array.

Only one repeated field is allowed, only the first RepeatedField is considered.",
        "properties": {
          "repeat": {
            "description": "The list of fields that should be repeated for each array item.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Button",
                },
                {
                  "$ref": "#/definitions/Dropdown",
                },
                {
                  "$ref": "#/definitions/Field",
                },
              ],
            },
            "type": "array",
          },
          "value": {
            "description": "The value to use as the base of the repeated field.

Should be an array of data.",
            "format": "remapper",
          },
        },
        "required": [
          "repeat",
          "value",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "properties": {
          "alignment": {
            "description": "Whether the content of the cell should be aligned left, right, or centered",
            "enum": [
              "center",
              "left",
              "right",
            ],
            "type": "string",
          },
          "label": {
            "description": "An optional label used in the header of the table.

If this isn’t specified, no label will be shown. If no fields have a label, the table header row won’t be shown.",
            "format": "remapper",
          },
          "string": {
            "additionalProperties": false,
            "description": "The definition of the contents and styling of the string field.",
            "properties": {
              "multiline": {
                "default": false,
                "description": "Whether the string field should be multiline or not.",
                "type": "boolean",
              },
              "name": {
                "description": "The name of the field.",
                "type": "string",
              },
              "onEdit": {
                "description": "The name of the action to trigger when editing the field.",
                "format": "action",
                "type": "string",
              },
              "placeholder": {
                "description": "The placeholder to display when the field is empty.",
                "format": "remapper",
              },
            },
            "required": [
              "name",
              "onEdit",
            ],
            "type": "object",
          },
          "value": {
            "description": "The value of the field.",
            "format": "remapper",
          },
        },
        "required": [
          "value",
          "string",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields to display.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/Button",
            },
            {
              "$ref": "#/definitions/Dropdown",
            },
            {
              "$ref": "#/definitions/Field",
            },
            {
              "$ref": "#/definitions/Image",
            },
            {
              "$ref": "#/definitions/RepeatedField",
            },
            {
              "$ref": "#/definitions/StringField",
            },
          ],
        },
        "type": "array",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > tiles 1`] = `
{
  "actions": {
    "onClick": {
      "description": "This action is triggered when a tile is clicked.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "On what event to listen for incoming data to display.",
      },
    },
  },
  "messages": {
    "loadError": {
      "description": "This message is displayed if there was a problem loading the message.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "color": {
        "description": "This color is used to fill the background of the tile.

Takes either a hex color or a [Bulma color](https://bulma.io/documentation/helpers/color-helpers)",
        "format": "remapper",
      },
      "icon": {
        "description": "The [Font Awesome icon](https://fontawesome.com/icons?m=free) to render.

This is ignored if an asset can be resolved.",
        "format": "remapper",
      },
      "image": {
        "description": "This can be used to render an image. This can be either an asset ID or name, or a full URL.

This takes precedence over an icon.",
        "format": "remapper",
      },
      "text": {
        "description": "The label to render.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > timer 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "interval": {
        "description": "The event to emit on an interval",
      },
    },
    "listen": undefined,
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "interval": {
        "description": "The time between the emitted events in seconds.",
        "type": "number",
      },
    },
    "required": [
      "interval",
    ],
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > video 1`] = `
{
  "actions": {
    "onFinish": {
      "description": "The action that is dispatched when the video has finished playing.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "onVideo": {
        "description": "The event to listen on for new data.

The result must be either a video URL or an object containing a property \`url\`.",
      },
    },
  },
  "messages": {
    "loadErrorMessage": {
      "description": "The error message that should be shown when video failed to load.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "autoplay": {
        "description": "Whether the video should autoplay.

Note that this does not work on every platform due to platform restrictions.",
        "type": "boolean",
      },
      "height": {
        "description": "The height of the player.",
        "type": "string",
      },
      "maxHeight": {
        "description": "The max height of the player.",
        "type": "string",
      },
      "maxWidth": {
        "description": "The max width of the player.",
        "type": "string",
      },
      "muted": {
        "description": "Whether the player should default to being muted.",
        "type": "boolean",
      },
      "subtitles": {
        "description": "If defined, the subtitle track to enable by default.",
        "format": "remapper",
      },
      "url": {
        "description": "The URL of the video.

Note that this is ignored if the onVideo event listener is set.",
        "format": "remapper",
      },
      "volume": {
        "description": "The volume in percentages the video should default to.",
        "maximum": 100,
        "minimum": 0,
        "type": "number",
      },
      "width": {
        "description": "The width of the player.",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`getProjectImplementations > official blocks > wordcloud 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "This event can be used to receive incoming data to display.",
      },
    },
  },
  "messages": {
    "empty": {
      "description": "This message is displayed if the data is empty.",
    },
    "error": {
      "description": "This message is displayed if there was a problem loading the data.",
    },
    "loading": {
      "description": "This message is displayed if no data has been loaded yet.",
    },
    "unsupported": {
      "description": "This message is displayed if the browser does not support the block",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Options": {
        "additionalProperties": false,
        "properties": {
          "backgroundColor": {
            "description": "The background color for the wordcloud.",
            "type": "string",
          },
          "clearCanvas": {
            "description": "Paint the entire canvas with background color and consider it empty before start.",
            "type": "boolean",
          },
          "color": {
            "default": "#000000",
            "description": "Color of the text, can be any CSS color You may also specify colors with built-in * keywords: random-dark and random-light.",
            "type": "string",
          },
          "drawOutOfBound": {
            "description": "Set to true to allow word being draw partly outside of the canvas. Allow word bigger than the size of the canvas to be drawn.",
            "type": "boolean",
          },
          "fontFamily": {
            "description": "The font the wordcloud words use.",
            "type": "string",
          },
          "fontWeight": {
            "description": "Font weight to use, e.g. normal, bold or 600",
            "type": [
              "number",
              "string",
            ],
          },
          "maxRotation": {
            "description": "If the word should rotate, the maximum rotation (in rad) the text should rotate. Set the two value equal to  keep all text in one angle.",
            "type": "number",
          },
          "minRotation": {
            "description": "If the word should rotate, the minimum rotation (in rad) the text should rotate.",
            "type": "number",
          },
          "minSize": {
            "description": "Minimum font size to draw on the canvas.",
            "type": "number",
          },
          "rotateRatio": {
            "default": 0,
            "description": "Probability for the word to rotate. Set the number to 1 to always rotate.",
            "type": "number",
          },
          "shrinkToFit": {
            "description": "Set to \`true\` to shrink the word so it will fit into canvas. Best if \`drawOutOfBound\` is set to false. This word will now have lower weight.",
            "type": "boolean",
          },
          "shuffle": {
            "description": "Shuffle the points to draw so the result will be different each time for the same list and settings.",
            "type": "boolean",
          },
          "weightFactor": {
            "description": "Number to multiply the word size by.",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "anyOf": [
          {
            "items": {
              "format": "remapper",
            },
            "type": "array",
          },
          {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        ],
        "description": "A list of fields to render out in a table.",
      },
      "options": {
        "$ref": "#/definitions/Options",
        "description": "List of options for rendering the wordcloud.",
      },
      "shape": {
        "default": "circle",
        "description": "Shape of the wordcloud.",
        "enum": [
          "cardioid",
          "circle",
          "diamond",
          "pentagon",
          "square",
          "star",
          "triangle-forward",
          "triangle",
        ],
        "type": "string",
      },
    },
    "required": [
      "fields",
      "options",
    ],
    "type": "object",
  },
}
`;
