// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`createBlock > should validate block examples 1`] = `
HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8

{
  "data": {
    "errors": [
      {
        "argument": {
          "id": "[subschema 1]",
          "length": 110,
          "valid": {
            "disableFormat": false,
            "errors": [
              {
                "argument": "target",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "target"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "config": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper whose result will be sent to Google Analytics as additional context",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "target": {
                      "description": "The name of the analytics target event to send.",
                      "type": "string",
                    },
                    "type": {
                      "description": "This action sends a Google Analytics event.

It returns the input data.
",
                      "enum": [
                        "analytics",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "target",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "target"",
              },
              {
                "argument": [
                  "analytics",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: analytics",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "This action sends a Google Analytics event.

It returns the input data.
",
                  "enum": [
                    "analytics",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: analytics",
              },
              {
                "argument": "handler",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "handler"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "handler": {
                      "description": "The name of the function in the controller that will handle the action",
                      "type": "string",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Use the controller to handle the action.",
                      "enum": [
                        "controller",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "handler",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "handler"",
              },
              {
                "argument": [
                  "controller",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: controller",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Use the controller to handle the action.",
                  "enum": [
                    "controller",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: controller",
              },
              {
                "argument": "if",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "if"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "else": {
                      "$ref": "#/components/schemas/ActionDefinition",
                      "description": "This action is called if the \`if\` remapper yields a falsy value.",
                    },
                    "if": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper to determine the condition to check.

If this yields a truthy value, the \`then\` action is called. Otherwise the \`else\` action is
called.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "then": {
                      "$ref": "#/components/schemas/ActionDefinition",
                      "description": "This action is called if the \`if\` remapper yields a truthy value.",
                    },
                    "type": {
                      "description": "Run another action if a certain contition is met.",
                      "enum": [
                        "condition",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "if",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "if"",
              },
              {
                "argument": [
                  "condition",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: condition",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Run another action if a certain contition is met.",
                  "enum": [
                    "condition",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: condition",
              },
              {
                "argument": "blocks",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "blocks"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "blocks": {
                      "description": "A list of blocks to display in the dialog.",
                      "items": {
                        "$ref": "#/components/schemas/BlockDefinition",
                      },
                      "type": "array",
                    },
                    "closable": {
                      "default": true,
                      "description": "Whether users are allowed to close the dialog by clicking outside of it or on the close button.",
                      "type": "boolean",
                    },
                    "fullscreen": {
                      "default": false,
                      "description": "Whether the dialog should be displayed full screen as if itâ€™s a new page, or as a pop-up.",
                      "type": "boolean",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "title": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "An optional title to set in the dialog header.",
                    },
                    "type": {
                      "description": "This action opens a pop-up dialog that can be used to seamlessly transition to a new set of blocks temporarily.

Dialogs can be closed by calling the [\`dialog.ok\`](#DialogOkActionDefinition) or
[\`dialog.error\`](#DialogErrorActionDefinition). Users can still manually close dialogs, which
should be supported by the app.

Blocks with the layout type \`float\` (e.g. \`action-button\`) do not work in this action.
",
                      "enum": [
                        "dialog",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "blocks",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "blocks"",
              },
              {
                "argument": [
                  "dialog",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: dialog",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "This action opens a pop-up dialog that can be used to seamlessly transition to a new set of blocks temporarily.

Dialogs can be closed by calling the [\`dialog.ok\`](#DialogOkActionDefinition) or
[\`dialog.error\`](#DialogErrorActionDefinition). Users can still manually close dialogs, which
should be supported by the app.

Blocks with the layout type \`float\` (e.g. \`action-button\`) do not work in this action.
",
                  "enum": [
                    "dialog",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: dialog",
              },
              {
                "argument": [
                  "dialog.error",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: dialog.error",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Close an open dialog.

The dialog action that opened the dialog will be rejected with the data passed to this action.
",
                  "enum": [
                    "dialog.error",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: dialog.error",
              },
              {
                "argument": [
                  "dialog.ok",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: dialog.ok",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Close an open dialog.

The dialog action that opened the dialog will be rejected with the data passed to this action.
",
                  "enum": [
                    "dialog.ok",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: dialog.ok",
              },
              {
                "argument": "filename",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "filename"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "filename": {
                      "description": "The filename to save the file as. This must include a file extension.",
                      "pattern": "\\.",
                      "type": "string",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Download the data as a file.",
                      "enum": [
                        "download",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "filename",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "filename"",
              },
              {
                "argument": [
                  "download",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: download",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Download the data as a file.",
                  "enum": [
                    "download",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: download",
              },
              {
                "argument": "do",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "do"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "do": {
                      "$ref": "#/components/schemas/ActionDefinition",
                      "description": "This action is called for each item in the input array.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "serial": {
                      "description": "Runs the action in series instead of parallel",
                      "type": "boolean",
                    },
                    "type": {
                      "description": "Run an action for each entry in an array.

The actions are run in parallel.

If the input is not an array, the action will be applied to the input instead.",
                      "enum": [
                        "each",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "do",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "do"",
              },
              {
                "argument": [
                  "each",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: each",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Run an action for each entry in an array.

The actions are run in parallel.

If the input is not an array, the action will be applied to the input instead.",
                  "enum": [
                    "each",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: each",
              },
              {
                "argument": "subject",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "subject"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "attachments": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The attachments to include in the email.

The remapper must resolve to an object containing the following properties:

- \`target\`: The asset ID or link to download contents from to add as an attachment. This is mutually exclusive with \`content\`.
- \`content\`: The raw content to include as the file content. This is mutually exclusive with \`target\`.
- \`filename\`: The filename to include the attachment as.
- \`accept\` If the target is a URL, this will be set as the HTTP \`Accept\` header when downloading the file.

If the attachment is a string, it will be treated as the target.",
                    },
                    "bcc": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Email addresses in the BCC are hidden from other recipients.",
                    },
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The body of the email. The content of the body is converted to HTML using the Markdown syntax.",
                    },
                    "cc": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Every email address in the CC is visible to all recipients.",
                    },
                    "from": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The name of the sender of the email.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "subject": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The subject of the email.",
                    },
                    "to": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The address the email should be sent to. Can be either in the format of \`test@example.com\`, or \`John Doe <test@example.com>\`",
                    },
                    "type": {
                      "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
                      "enum": [
                        "email",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "subject",
                    "body",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "subject"",
              },
              {
                "argument": "body",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "body"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "attachments": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The attachments to include in the email.

The remapper must resolve to an object containing the following properties:

- \`target\`: The asset ID or link to download contents from to add as an attachment. This is mutually exclusive with \`content\`.
- \`content\`: The raw content to include as the file content. This is mutually exclusive with \`target\`.
- \`filename\`: The filename to include the attachment as.
- \`accept\` If the target is a URL, this will be set as the HTTP \`Accept\` header when downloading the file.

If the attachment is a string, it will be treated as the target.",
                    },
                    "bcc": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Email addresses in the BCC are hidden from other recipients.",
                    },
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The body of the email. The content of the body is converted to HTML using the Markdown syntax.",
                    },
                    "cc": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Every email address in the CC is visible to all recipients.",
                    },
                    "from": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The name of the sender of the email.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "subject": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The subject of the email.",
                    },
                    "to": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The address the email should be sent to. Can be either in the format of \`test@example.com\`, or \`John Doe <test@example.com>\`",
                    },
                    "type": {
                      "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
                      "enum": [
                        "email",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "subject",
                    "body",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "body"",
              },
              {
                "argument": [
                  "email",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: email",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
                  "enum": [
                    "email",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: email",
              },
              {
                "argument": "event",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "event"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "event": {
                      "description": "The name of the event to emit.",
                      "type": "string",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "This action allows for other blocks to emit data upon triggering the action.

This can be used to make blocks interact with each other, such as triggering the \`data-loader\`
block to refresh itself by sending an event action that matches the name of what the block is
listening to.
",
                      "enum": [
                        "event",
                      ],
                    },
                    "waitFor": {
                      "description": "If specified, the action will wait for this event to have been emitted and respond with its data.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "type",
                    "event",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "event"",
              },
              {
                "argument": [
                  "event",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: event",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "This action allows for other blocks to emit data upon triggering the action.

This can be used to make blocks interact with each other, such as triggering the \`data-loader\`
block to refresh itself by sending an event action that matches the name of what the block is
listening to.
",
                  "enum": [
                    "event",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: event",
              },
              {
                "argument": [
                  "flow.back",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: flow.back",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "On [flow pages](#flow-page-definition-sub-pages), return to the previous page if
it is present. If this is called on the first page, nothing happens.
",
                  "enum": [
                    "flow.back",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: flow.back",
              },
              {
                "argument": [
                  "flow.finish",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: flow.finish",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "On [flow pages](#flow-page-definition-sub-pages), triggers the
[\`onFlowFinish\`](#flow-page-actions-definition-on-flow-finish) action on the page.
",
                  "enum": [
                    "flow.finish",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: flow.finish",
              },
              {
                "argument": [
                  "flow.next",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: flow.next",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "On [flow pages](#flow-page-definition-sub-pages), proceed to the next page if it
is present. Otherwise, the flow is considered to be complete and [\`flow.finish\`](#flowfinish) will
be called instead.
",
                  "enum": [
                    "flow.next",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: flow.next",
              },
              {
                "argument": [
                  "flow.cancel",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: flow.cancel",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "On [flow pages](#flow-page-definition-sub-pages), cancel the ongoing flow and invoke the page's [\`onFlowFinish\`](#flow-page-actions-definition-on-flow-finish) action.",
                  "enum": [
                    "flow.cancel",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: flow.cancel",
              },
              {
                "argument": "step",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "step"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "step": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The name of the step to move to.

This is a remapper which gets called with the action input and context.
",
                    },
                    "type": {
                      "description": "On [flow pages](#flow-page-definition-sub-pages), move to a specific step.",
                      "enum": [
                        "flow.to",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "step",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "step"",
              },
              {
                "argument": [
                  "flow.to",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: flow.to",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "On [flow pages](#flow-page-definition-sub-pages), move to a specific step.",
                  "enum": [
                    "flow.to",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: flow.to",
              },
              {
                "argument": "to",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "to"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "to": {
                      "anyOf": [
                        {
                          "type": "string",
                        },
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "$ref": "#/components/schemas/RemapperDefinition",
                        },
                      ],
                      "description": "The name of the page to link to. Subpages can be referred to using arrays. If this matches with an absolute URL, link will open this instead of matching it with a page or subpage.",
                    },
                    "type": {
                      "description": "The link action can be used to redirect the user to other pages or absolute URLs.",
                      "enum": [
                        "link",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "to",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "to"",
              },
              {
                "argument": [
                  "link",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: link",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "The link action can be used to redirect the user to other pages or absolute URLs.",
                  "enum": [
                    "link",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: link",
              },
              {
                "argument": [
                  "link.back",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: link.back",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Link back to the previous page in the browser history.",
                  "enum": [
                    "link.back",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: link.back",
              },
              {
                "argument": [
                  "link.next",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: link.next",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Link to the next page in the browser history.",
                  "enum": [
                    "link.next",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: link.next",
              },
              {
                "argument": [
                  "log",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: log",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Output the result of the action into the console.

This is mostly useful for debugging blocks during development.
",
                  "enum": [
                    "log",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: log",
              },
              {
                "argument": "match",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "match"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "match": {
                      "items": {
                        "additionalProperties": false,
                        "description": "",
                        "properties": {
                          "action": {
                            "$ref": "#/components/schemas/ActionDefinition",
                            "description": "Action to be called if the case equals true.",
                          },
                          "case": {
                            "$ref": "#/components/schemas/RemapperDefinition",
                            "description": "The case to be matched.",
                          },
                        },
                        "required": [
                          "case",
                          "action",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Run another action if one of the cases is true.

Only the first case that equals true is called.",
                      "enum": [
                        "match",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "match",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "match"",
              },
              {
                "argument": [
                  "match",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: match",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Run another action if one of the cases is true.

Only the first case that equals true is called.",
                  "enum": [
                    "match",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: match",
              },
              {
                "argument": "body",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "body"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The body of the message.",
                    },
                    "color": {
                      "default": "info",
                      "description": "The Bulma color to apply to the message.",
                      "enum": [
                        "dark",
                        "primary",
                        "link",
                        "success",
                        "info",
                        "warning",
                        "danger",
                      ],
                    },
                    "dismissable": {
                      "description": "Boolean value indicating whether the user is able to dismiss the message manually.",
                      "type": "boolean",
                    },
                    "layout": {
                      "default": "bottom",
                      "description": "The position of the message on the screen.",
                      "enum": [
                        "bottom",
                        "top",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "timeout": {
                      "default": 5000,
                      "description": "The time in milliseconds how long the message should be visible.",
                      "type": "integer",
                    },
                    "type": {
                      "description": "Display a message to the user.

This is useful in combination with action chaining to notify users they have performed a certain action.
",
                      "enum": [
                        "message",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "body",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "body"",
              },
              {
                "argument": [
                  "message",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: message",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Display a message to the user.

This is useful in combination with action chaining to notify users they have performed a certain action.
",
                  "enum": [
                    "message",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: message",
              },
              {
                "argument": [
                  "noop",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: noop",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Do nothing when this action is triggered.

This is the default action for block actions that are not required.
",
                  "enum": [
                    "noop",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: noop",
              },
              {
                "argument": "title",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "title"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The description of the notification.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "title": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The title of the notification.",
                    },
                    "to": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
                    },
                    "type": {
                      "description": "Send notifications to one or all the users of an app.",
                      "enum": [
                        "notify",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "title",
                    "body",
                    "to",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "title"",
              },
              {
                "argument": "body",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "body"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The description of the notification.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "title": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The title of the notification.",
                    },
                    "to": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
                    },
                    "type": {
                      "description": "Send notifications to one or all the users of an app.",
                      "enum": [
                        "notify",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "title",
                    "body",
                    "to",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "body"",
              },
              {
                "argument": "to",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "to"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The description of the notification.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "title": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The title of the notification.",
                    },
                    "to": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
                    },
                    "type": {
                      "description": "Send notifications to one or all the users of an app.",
                      "enum": [
                        "notify",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "title",
                    "body",
                    "to",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "to"",
              },
              {
                "argument": [
                  "notify",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: notify",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Send notifications to one or all the users of an app.",
                  "enum": [
                    "notify",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: notify",
              },
              {
                "argument": "url",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "url"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "method": {
                      "default": "get",
                      "description": "The type of request to make.",
                      "enum": [
                        "delete",
                        "get",
                        "patch",
                        "post",
                        "put",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Performs an HTTP request.

This can be used to call the Appsemble API or an external API in order to fetch data or send data.
When sending \`POST\`, \`PUT\`, \`DELETE\` and \`PATCH\` calls the data that is currently available
in the block gets passed through.

If the content type of the request is \`text/xml\` or \`application/xml\`, the data will be
converted to JSON.
",
                      "enum": [
                        "request",
                      ],
                    },
                    "url": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in the URL to send the request to.

Can be a relative URL (E.g. \`/api/health\`) for usage with the Appsemble API, or an absolute URL
(E.g. \`https://example.com\`) for usage with external sites.",
                    },
                  },
                  "required": [
                    "type",
                    "url",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "url"",
              },
              {
                "argument": [
                  "request",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: request",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Performs an HTTP request.

This can be used to call the Appsemble API or an external API in order to fetch data or send data.
When sending \`POST\`, \`PUT\`, \`DELETE\` and \`PATCH\` calls the data that is currently available
in the block gets passed through.

If the content type of the request is \`text/xml\` or \`application/xml\`, the data will be
converted to JSON.
",
                  "enum": [
                    "request",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: request",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "own": {
                      "description": "If only the resources created by the authenticated app member should be included",
                      "type": "boolean",
                    },
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to count.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Count the number of resources a similar \`resource.query\` action would return.",
                      "enum": [
                        "resource.count",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.count",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.count",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Count the number of resources a similar \`resource.query\` action would return.",
                  "enum": [
                    "resource.count",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.count",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to create.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Create a resource.",
                      "enum": [
                        "resource.create",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.create",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.create",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Create a resource.",
                  "enum": [
                    "resource.create",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.create",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to delete.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Delete a resource.",
                      "enum": [
                        "resource.delete",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.delete",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.delete",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Delete a resource.",
                  "enum": [
                    "resource.delete",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.delete",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to get.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Get a single resource.",
                      "enum": [
                        "resource.get",
                      ],
                    },
                    "view": {
                      "description": "The view to use for the resource.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.get",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.get",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Get a single resource.",
                  "enum": [
                    "resource.get",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.get",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "method": {
                      "default": "get",
                      "description": "The type of request to make.",
                      "enum": [
                        "delete",
                        "get",
                        "patch",
                        "post",
                        "put",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to get.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Get the complete history of a resource.",
                      "enum": [
                        "resource.history.get",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.history.get",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.history.get",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Get the complete history of a resource.",
                  "enum": [
                    "resource.history.get",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.history.get",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "own": {
                      "description": "If only the resources created by the authenticated app member should be included",
                      "type": "boolean",
                    },
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to query.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Query a list of resources.",
                      "enum": [
                        "resource.query",
                      ],
                    },
                    "view": {
                      "description": "The view to use for the resource.",
                      "type": "string",
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.query",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.query",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Query a list of resources.",
                  "enum": [
                    "resource.query",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.query",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "action": {
                      "description": "The resource action type to get the subscription state for.",
                      "enum": [
                        "create",
                        "delete",
                        "update",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to get the subscription state for.",
                      "type": "string",
                    },
                    "type": {
                      "description": "Get the status of whether or not the user is subscriped to notifications for resource modifications.",
                      "enum": [
                        "resource.subscription.status",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.subscription.status",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.subscription.status",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Get the status of whether or not the user is subscriped to notifications for resource modifications.",
                  "enum": [
                    "resource.subscription.status",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.status",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "action": {
                      "description": "The resource action type to subscribe to.",
                      "enum": [
                        "create",
                        "delete",
                        "update",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to subscribe to.",
                      "type": "string",
                    },
                    "type": {
                      "description": "Subscribe to notifications on resource modifications.",
                      "enum": [
                        "resource.subscription.subscribe",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.subscription.subscribe",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.subscription.subscribe",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Subscribe to notifications on resource modifications.",
                  "enum": [
                    "resource.subscription.subscribe",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.subscribe",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "action": {
                      "description": "The resource action type to toggle the subscription state for.",
                      "enum": [
                        "create",
                        "delete",
                        "update",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to toggle the subscription state for.",
                      "type": "string",
                    },
                    "type": {
                      "description": "Toggle whether or not to receive notifications on resource modifications.",
                      "enum": [
                        "resource.subscription.toggle",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.subscription.toggle",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.subscription.toggle",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Toggle whether or not to receive notifications on resource modifications.",
                  "enum": [
                    "resource.subscription.toggle",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.toggle",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "action": {
                      "description": "The resource action type to unsubscribe from.",
                      "enum": [
                        "create",
                        "delete",
                        "update",
                      ],
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to unsubscribe from.",
                      "type": "string",
                    },
                    "type": {
                      "description": "Unsubscribe from notifications on resource modifications.",
                      "enum": [
                        "resource.subscription.unsubscribe",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.subscription.unsubscribe",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.subscription.unsubscribe",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Unsubscribe from notifications on resource modifications.",
                  "enum": [
                    "resource.subscription.unsubscribe",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.unsubscribe",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to update.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Update a resource.",
                      "enum": [
                        "resource.update",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.update",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.update",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Update a resource.",
                  "enum": [
                    "resource.update",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.update",
              },
              {
                "argument": "resource",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "resource"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "proxy": {
                      "default": true,
                      "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
                      "type": "boolean",
                    },
                    "query": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "resource": {
                      "description": "The type of the resource to patch.",
                      "type": "string",
                    },
                    "schema": {
                      "$ref": "#/components/schemas/JSONSchema",
                      "description": "The name of the schema to validate against before submitting data.",
                    },
                    "type": {
                      "description": "Patch a resource.",
                      "enum": [
                        "resource.patch",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "resource",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "resource"",
              },
              {
                "argument": [
                  "resource.patch",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: resource.patch",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Patch a resource.",
                  "enum": [
                    "resource.patch",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: resource.patch",
              },
              {
                "argument": [
                  "share",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: share",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "The \`share\` action can be used to display a prompt that allows the user to share something with others, primarily via social media.

Depending on whether the userâ€™s browser supports a native share function it will either display a
native dialog for sharing links, or display a more limited fallback in a dialog.
",
                  "enum": [
                    "share",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: share",
              },
              {
                "argument": "value",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "value"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "The \`static\` action returns static data defined in the action definition.

This is useful for example for stubbing data.
",
                      "enum": [
                        "static",
                      ],
                    },
                    "value": {
                      "description": "The static value to return.",
                    },
                  },
                  "required": [
                    "type",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "value"",
              },
              {
                "argument": [
                  "static",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: static",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "The \`static\` action returns static data defined in the action definition.

This is useful for example for stubbing data.
",
                  "enum": [
                    "static",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: static",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
                      "enum": [
                        "storage.append",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to write on top of the storage entry.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": "value",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "value"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
                      "enum": [
                        "storage.append",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to write on top of the storage entry.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "value"",
              },
              {
                "argument": [
                  "storage.append",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.append",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
                  "enum": [
                    "storage.append",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.append",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to read the data from.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Subtract last item from a storage entry.

      If the entry consists of only one item, turns it into a singular object.

      If the entry is a single item, the entry is removed entirely.

For example:
\`\`\`yaml
type: storage.subtract
key: temp
storage: localStorage
\`\`\`
        ",
                      "enum": [
                        "storage.subtract",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "key",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": [
                  "storage.subtract",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.subtract",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Subtract last item from a storage entry.

      If the entry consists of only one item, turns it into a singular object.

      If the entry is a single item, the entry is removed entirely.

For example:
\`\`\`yaml
type: storage.subtract
key: temp
storage: localStorage
\`\`\`
        ",
                  "enum": [
                    "storage.subtract",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.subtract",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to read the data from.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Read data from the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.read
key: temp
storage: localStorage
\`\`\`

      ",
                      "enum": [
                        "storage.read",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "key",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": [
                  "storage.read",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.read",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Read data from the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.read
key: temp
storage: localStorage
\`\`\`

      ",
                  "enum": [
                    "storage.read",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.read",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
                      "enum": [
                        "storage.write",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to write to the storage entry.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": "value",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "value"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
                      "enum": [
                        "storage.write",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to write to the storage entry.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "value"",
              },
              {
                "argument": [
                  "storage.write",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.write",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
                  "enum": [
                    "storage.write",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.write",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "item": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the item in an array to update.",
                    },
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
                      "enum": [
                        "storage.update",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to update the specified item with.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": "value",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "value"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "item": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the item in an array to update.",
                    },
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to store the data.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
                      "enum": [
                        "storage.update",
                      ],
                    },
                    "value": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The data to update the specified item with.",
                    },
                  },
                  "required": [
                    "type",
                    "key",
                    "value",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "value"",
              },
              {
                "argument": [
                  "storage.update",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.update",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
                  "enum": [
                    "storage.update",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.update",
              },
              {
                "argument": "key",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "key"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The key of the storage entry to remove.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "storage": {
                      "default": "indexedDB",
                      "description": "The mechanism used to remove the data from.",
                      "enum": [
                        "indexedDB",
                        "localStorage",
                        "sessionStorage",
                        "appStorage",
                      ],
                    },
                    "type": {
                      "description": "Delete the item that is stored at the specified key.

For example:
\`\`\`yaml
type: storage.delete
key: temp
storage: localStorage
\`\`\`
      ",
                      "enum": [
                        "storage.delete",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "key",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "key"",
              },
              {
                "argument": [
                  "storage.delete",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: storage.delete",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Delete the item that is stored at the specified key.

For example:
\`\`\`yaml
type: storage.delete
key: temp
storage: localStorage
\`\`\`
      ",
                  "enum": [
                    "storage.delete",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: storage.delete",
              },
              {
                "argument": [
                  "group.member.invite",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: group.member.invite",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Invite an app member to join a group.",
                  "enum": [
                    "group.member.invite",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.invite",
              },
              {
                "argument": "id",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "id"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The ID of a specific group to get the members from",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Get a list of a group's members",
                      "enum": [
                        "group.member.query",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "id",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "id"",
              },
              {
                "argument": [
                  "group.member.query",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: group.member.query",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Get a list of a group's members",
                  "enum": [
                    "group.member.query",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.query",
              },
              {
                "argument": "id",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "id"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The id of the group member to delete",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Allow a user to join a group.",
                      "enum": [
                        "group.member.delete",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "id",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "id"",
              },
              {
                "argument": [
                  "group.member.delete",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: group.member.delete",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allow a user to join a group.",
                  "enum": [
                    "group.member.delete",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.delete",
              },
              {
                "argument": "id",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "id"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The id of the group member to update the role of.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "role": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The new role of the group member.",
                    },
                    "type": {
                      "description": "Update the role of a group member.",
                      "enum": [
                        "group.member.role.update",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "id",
                    "role",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "id"",
              },
              {
                "argument": "role",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "role"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The id of the group member to update the role of.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "role": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The new role of the group member.",
                    },
                    "type": {
                      "description": "Update the role of a group member.",
                      "enum": [
                        "group.member.role.update",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "id",
                    "role",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "role"",
              },
              {
                "argument": [
                  "group.member.role.update",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: group.member.role.update",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Update the role of a group member.",
                  "enum": [
                    "group.member.role.update",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.role.update",
              },
              {
                "argument": [
                  "group.query",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: group.query",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Get a list of all of the groups in an app.",
                  "enum": [
                    "group.query",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: group.query",
              },
              {
                "argument": [
                  "throw",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: throw",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "This action throws a new exception based on the data that is passed through.

This can be used to create a custom error that ends up in the error action handler.
",
                  "enum": [
                    "throw",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: throw",
              },
              {
                "argument": [
                  "app.member.login",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.login",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to login using an email address and a password.

Does nothing if the app member is already logged in.",
                  "enum": [
                    "app.member.login",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.login",
              },
              {
                "argument": [
                  "app.member.logout",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.logout",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allow the app members to log out of the application.",
                  "enum": [
                    "app.member.logout",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.logout",
              },
              {
                "argument": "email",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "email"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "email": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The email to log in with.",
                    },
                    "login": {
                      "default": true,
                      "description": "Whether to login after registering.",
                      "type": "boolean",
                    },
                    "name": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The full name of the app member.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "password": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The password to log in with.",
                    },
                    "picture": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The image to use for the profile picture of the app member.",
                    },
                    "properties": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
                      "enum": [
                        "app.member.register",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "email",
                    "password",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "email"",
              },
              {
                "argument": "password",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "password"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "email": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The email to log in with.",
                    },
                    "login": {
                      "default": true,
                      "description": "Whether to login after registering.",
                      "type": "boolean",
                    },
                    "name": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The full name of the app member.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "password": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The password to log in with.",
                    },
                    "picture": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The image to use for the profile picture of the app member.",
                    },
                    "properties": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "type": {
                      "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
                      "enum": [
                        "app.member.register",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "email",
                    "password",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "password"",
              },
              {
                "argument": [
                  "app.member.register",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.register",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
                  "enum": [
                    "app.member.register",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.register",
              },
              {
                "argument": "email",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "email"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "email": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The email to invite.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "role": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The role of the invited app member.",
                    },
                    "type": {
                      "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
                      "enum": [
                        "app.member.invite",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "email",
                    "role",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "email"",
              },
              {
                "argument": "role",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "role"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "email": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The email to invite.",
                    },
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "role": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The role of the invited app member.",
                    },
                    "type": {
                      "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
                      "enum": [
                        "app.member.invite",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "email",
                    "role",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "role"",
              },
              {
                "argument": [
                  "app.member.invite",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.invite",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
                  "enum": [
                    "app.member.invite",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.invite",
              },
              {
                "argument": "sub",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "sub"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "role": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The updated role of the app member.

The role must exist in the roles property of the app's security definition or in the predefined app roles in the system -
\`Member\`, \`MembersManager\`, \`GroupMembersManager\`, \`GroupsManager\`, \`ResourcesManager\` and \`Owner\`",
                    },
                    "sub": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The id of the app member.",
                    },
                    "type": {
                      "description": "Allows the app member to update the role of another app member account.

Does nothing if the app member isnâ€™t logged in.",
                      "enum": [
                        "app.member.role.update",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "sub",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "sub"",
              },
              {
                "argument": [
                  "app.member.role.update",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.role.update",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to update the role of another app member account.

Does nothing if the app member isnâ€™t logged in.",
                  "enum": [
                    "app.member.role.update",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.role.update",
              },
              {
                "argument": [
                  "app.member.current.patch",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.current.patch",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to patch their own app member account.

Does nothing if the app member isnâ€™t logged in.",
                  "enum": [
                    "app.member.current.patch",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.current.patch",
              },
              {
                "argument": "sub",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "sub"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "properties": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The updated custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
                    },
                    "remapAfter": {},
                    "remapBefore": {},
                    "sub": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The new full name name of the app member.",
                    },
                    "type": {
                      "description": "Allows the app member to patch the properties of another app member account.

Does nothing if the app member isnâ€™t logged in.",
                      "enum": [
                        "app.member.properties.patch",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "sub",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "sub"",
              },
              {
                "argument": [
                  "app.member.properties.patch",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.properties.patch",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to patch the properties of another app member account.

Does nothing if the app member isnâ€™t logged in.",
                  "enum": [
                    "app.member.properties.patch",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.properties.patch",
              },
              {
                "argument": [
                  "app.member.query",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.query",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the currently logged in app member to fetch a list of app members by their roles.

Does nothing if the app member isnâ€™t logged in.",
                  "enum": [
                    "app.member.query",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.query",
              },
              {
                "argument": "sub",
                "instance": {
                  "type": "invalid",
                },
                "message": "requires property "sub"",
                "name": "required",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "onError": {},
                    "onSuccess": {},
                    "remapAfter": {},
                    "remapBefore": {},
                    "sub": {
                      "$ref": "#/components/schemas/RemapperDefinition",
                      "description": "The id of the app member to be deleted.",
                    },
                    "type": {
                      "description": "Allows the app member to delete another app member.

Does nothing if the app member isnâ€™t logged in.",
                      "enum": [
                        "app.member.delete",
                      ],
                    },
                  },
                  "required": [
                    "type",
                    "sub",
                  ],
                  "type": "object",
                },
                "stack": "instance.actions.onSubmit requires property "sub"",
              },
              {
                "argument": [
                  "app.member.delete",
                ],
                "instance": "invalid",
                "message": "is not one of enum values: app.member.delete",
                "name": "enum",
                "path": [
                  "actions",
                  "onSubmit",
                  "type",
                ],
                "property": "instance.actions.onSubmit.type",
                "schema": {
                  "description": "Allows the app member to delete another app member.

Does nothing if the app member isnâ€™t logged in.",
                  "enum": [
                    "app.member.delete",
                  ],
                },
                "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.delete",
              },
              {
                "argument": [
                  "<#/components/schemas/AnalyticsActionDefinition>",
                  "<#/components/schemas/ControllerActionDefinition>",
                  "<#/components/schemas/ConditionActionDefinition>",
                  "<#/components/schemas/DialogActionDefinition>",
                  "<#/components/schemas/DialogErrorActionDefinition>",
                  "<#/components/schemas/DialogOkActionDefinition>",
                  "<#/components/schemas/DownloadActionDefinition>",
                  "<#/components/schemas/EachActionDefinition>",
                  "<#/components/schemas/EmailActionDefinition>",
                  "<#/components/schemas/EventActionDefinition>",
                  "<#/components/schemas/FlowBackActionDefinition>",
                  "<#/components/schemas/FlowFinishActionDefinition>",
                  "<#/components/schemas/FlowNextActionDefinition>",
                  "<#/components/schemas/FlowCancelActionDefinition>",
                  "<#/components/schemas/FlowToActionDefinition>",
                  "<#/components/schemas/LinkActionDefinition>",
                  "<#/components/schemas/LinkBackActionDefinition>",
                  "<#/components/schemas/LinkNextActionDefinition>",
                  "<#/components/schemas/LogActionDefinition>",
                  "<#/components/schemas/MatchActionDefinition>",
                  "<#/components/schemas/MessageActionDefinition>",
                  "<#/components/schemas/NoopActionDefinition>",
                  "<#/components/schemas/NotifyActionDefinition>",
                  "<#/components/schemas/RequestActionDefinition>",
                  "<#/components/schemas/ResourceCountActionDefinition>",
                  "<#/components/schemas/ResourceCreateActionDefinition>",
                  "<#/components/schemas/ResourceDeleteActionDefinition>",
                  "<#/components/schemas/ResourceGetActionDefinition>",
                  "<#/components/schemas/ResourceHistoryGetActionDefinition>",
                  "<#/components/schemas/ResourceQueryActionDefinition>",
                  "<#/components/schemas/ResourceSubscriptionStatusActionDefinition>",
                  "<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>",
                  "<#/components/schemas/ResourceSubscriptionToggleActionDefinition>",
                  "<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>",
                  "<#/components/schemas/ResourceUpdateActionDefinition>",
                  "<#/components/schemas/ResourcePatchActionDefinition>",
                  "<#/components/schemas/ShareActionDefinition>",
                  "<#/components/schemas/StaticActionDefinition>",
                  "<#/components/schemas/StorageAppendActionDefinition>",
                  "<#/components/schemas/StorageSubtractActionDefinition>",
                  "<#/components/schemas/StorageReadActionDefinition>",
                  "<#/components/schemas/StorageWriteActionDefinition>",
                  "<#/components/schemas/StorageUpdateActionDefinition>",
                  "<#/components/schemas/StorageDeleteActionDefinition>",
                  "<#/components/schemas/GroupMemberInviteActionDefinition>",
                  "<#/components/schemas/GroupMemberQueryActionDefinition>",
                  "<#/components/schemas/GroupMemberDeleteActionDefinition>",
                  "<#/components/schemas/GroupMemberRoleUpdateActionDefinition>",
                  "<#/components/schemas/GroupQueryActionDefinition>",
                  "<#/components/schemas/ThrowActionDefinition>",
                  "<#/components/schemas/AppMemberLoginActionDefinition>",
                  "<#/components/schemas/AppMemberLogoutActionDefinition>",
                  "<#/components/schemas/AppMemberRegisterActionDefinition>",
                  "<#/components/schemas/AppMemberInviteActionDefinition>",
                  "<#/components/schemas/AppMemberRoleUpdateActionDefinition>",
                  "<#/components/schemas/AppMemberCurrentPatchActionDefinition>",
                  "<#/components/schemas/AppMemberPropertiesPatchActionDefinition>",
                  "<#/components/schemas/AppMemberQueryActionDefinition>",
                  "<#/components/schemas/AppMemberDeleteActionDefinition>",
                ],
                "instance": {
                  "type": "invalid",
                },
                "message": "is not any of <#/components/schemas/AnalyticsActionDefinition>,<#/components/schemas/ControllerActionDefinition>,<#/components/schemas/ConditionActionDefinition>,<#/components/schemas/DialogActionDefinition>,<#/components/schemas/DialogErrorActionDefinition>,<#/components/schemas/DialogOkActionDefinition>,<#/components/schemas/DownloadActionDefinition>,<#/components/schemas/EachActionDefinition>,<#/components/schemas/EmailActionDefinition>,<#/components/schemas/EventActionDefinition>,<#/components/schemas/FlowBackActionDefinition>,<#/components/schemas/FlowFinishActionDefinition>,<#/components/schemas/FlowNextActionDefinition>,<#/components/schemas/FlowCancelActionDefinition>,<#/components/schemas/FlowToActionDefinition>,<#/components/schemas/LinkActionDefinition>,<#/components/schemas/LinkBackActionDefinition>,<#/components/schemas/LinkNextActionDefinition>,<#/components/schemas/LogActionDefinition>,<#/components/schemas/MatchActionDefinition>,<#/components/schemas/MessageActionDefinition>,<#/components/schemas/NoopActionDefinition>,<#/components/schemas/NotifyActionDefinition>,<#/components/schemas/RequestActionDefinition>,<#/components/schemas/ResourceCountActionDefinition>,<#/components/schemas/ResourceCreateActionDefinition>,<#/components/schemas/ResourceDeleteActionDefinition>,<#/components/schemas/ResourceGetActionDefinition>,<#/components/schemas/ResourceHistoryGetActionDefinition>,<#/components/schemas/ResourceQueryActionDefinition>,<#/components/schemas/ResourceSubscriptionStatusActionDefinition>,<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>,<#/components/schemas/ResourceSubscriptionToggleActionDefinition>,<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>,<#/components/schemas/ResourceUpdateActionDefinition>,<#/components/schemas/ResourcePatchActionDefinition>,<#/components/schemas/ShareActionDefinition>,<#/components/schemas/StaticActionDefinition>,<#/components/schemas/StorageAppendActionDefinition>,<#/components/schemas/StorageSubtractActionDefinition>,<#/components/schemas/StorageReadActionDefinition>,<#/components/schemas/StorageWriteActionDefinition>,<#/components/schemas/StorageUpdateActionDefinition>,<#/components/schemas/StorageDeleteActionDefinition>,<#/components/schemas/GroupMemberInviteActionDefinition>,<#/components/schemas/GroupMemberQueryActionDefinition>,<#/components/schemas/GroupMemberDeleteActionDefinition>,<#/components/schemas/GroupMemberRoleUpdateActionDefinition>,<#/components/schemas/GroupQueryActionDefinition>,<#/components/schemas/ThrowActionDefinition>,<#/components/schemas/AppMemberLoginActionDefinition>,<#/components/schemas/AppMemberLogoutActionDefinition>,<#/components/schemas/AppMemberRegisterActionDefinition>,<#/components/schemas/AppMemberInviteActionDefinition>,<#/components/schemas/AppMemberRoleUpdateActionDefinition>,<#/components/schemas/AppMemberCurrentPatchActionDefinition>,<#/components/schemas/AppMemberPropertiesPatchActionDefinition>,<#/components/schemas/AppMemberQueryActionDefinition>,<#/components/schemas/AppMemberDeleteActionDefinition>",
                "name": "anyOf",
                "path": [
                  "actions",
                  "onSubmit",
                ],
                "property": "instance.actions.onSubmit",
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AnalyticsActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ControllerActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ConditionActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/DialogActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/DialogErrorActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/DialogOkActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/DownloadActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/EachActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/EmailActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/EventActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/FlowBackActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/FlowFinishActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/FlowNextActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/FlowCancelActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/FlowToActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/LinkActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/LinkBackActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/LinkNextActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/LogActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/MatchActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/MessageActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/NoopActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/NotifyActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/RequestActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceCountActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceCreateActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceDeleteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceGetActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceHistoryGetActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceQueryActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSubscriptionStatusActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSubscriptionSubscribeActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSubscriptionToggleActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourceUpdateActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ResourcePatchActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ShareActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StaticActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageAppendActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageSubtractActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageReadActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageWriteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageUpdateActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/StorageDeleteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/GroupMemberInviteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/GroupMemberQueryActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/GroupMemberDeleteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/GroupMemberRoleUpdateActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/GroupQueryActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/ThrowActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberLoginActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberLogoutActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberRegisterActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberInviteActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberRoleUpdateActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberCurrentPatchActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberPropertiesPatchActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberQueryActionDefinition",
                    },
                    {
                      "$ref": "#/components/schemas/AppMemberDeleteActionDefinition",
                    },
                  ],
                },
                "stack": "instance.actions.onSubmit is not any of <#/components/schemas/AnalyticsActionDefinition>,<#/components/schemas/ControllerActionDefinition>,<#/components/schemas/ConditionActionDefinition>,<#/components/schemas/DialogActionDefinition>,<#/components/schemas/DialogErrorActionDefinition>,<#/components/schemas/DialogOkActionDefinition>,<#/components/schemas/DownloadActionDefinition>,<#/components/schemas/EachActionDefinition>,<#/components/schemas/EmailActionDefinition>,<#/components/schemas/EventActionDefinition>,<#/components/schemas/FlowBackActionDefinition>,<#/components/schemas/FlowFinishActionDefinition>,<#/components/schemas/FlowNextActionDefinition>,<#/components/schemas/FlowCancelActionDefinition>,<#/components/schemas/FlowToActionDefinition>,<#/components/schemas/LinkActionDefinition>,<#/components/schemas/LinkBackActionDefinition>,<#/components/schemas/LinkNextActionDefinition>,<#/components/schemas/LogActionDefinition>,<#/components/schemas/MatchActionDefinition>,<#/components/schemas/MessageActionDefinition>,<#/components/schemas/NoopActionDefinition>,<#/components/schemas/NotifyActionDefinition>,<#/components/schemas/RequestActionDefinition>,<#/components/schemas/ResourceCountActionDefinition>,<#/components/schemas/ResourceCreateActionDefinition>,<#/components/schemas/ResourceDeleteActionDefinition>,<#/components/schemas/ResourceGetActionDefinition>,<#/components/schemas/ResourceHistoryGetActionDefinition>,<#/components/schemas/ResourceQueryActionDefinition>,<#/components/schemas/ResourceSubscriptionStatusActionDefinition>,<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>,<#/components/schemas/ResourceSubscriptionToggleActionDefinition>,<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>,<#/components/schemas/ResourceUpdateActionDefinition>,<#/components/schemas/ResourcePatchActionDefinition>,<#/components/schemas/ShareActionDefinition>,<#/components/schemas/StaticActionDefinition>,<#/components/schemas/StorageAppendActionDefinition>,<#/components/schemas/StorageSubtractActionDefinition>,<#/components/schemas/StorageReadActionDefinition>,<#/components/schemas/StorageWriteActionDefinition>,<#/components/schemas/StorageUpdateActionDefinition>,<#/components/schemas/StorageDeleteActionDefinition>,<#/components/schemas/GroupMemberInviteActionDefinition>,<#/components/schemas/GroupMemberQueryActionDefinition>,<#/components/schemas/GroupMemberDeleteActionDefinition>,<#/components/schemas/GroupMemberRoleUpdateActionDefinition>,<#/components/schemas/GroupQueryActionDefinition>,<#/components/schemas/ThrowActionDefinition>,<#/components/schemas/AppMemberLoginActionDefinition>,<#/components/schemas/AppMemberLogoutActionDefinition>,<#/components/schemas/AppMemberRegisterActionDefinition>,<#/components/schemas/AppMemberInviteActionDefinition>,<#/components/schemas/AppMemberRoleUpdateActionDefinition>,<#/components/schemas/AppMemberCurrentPatchActionDefinition>,<#/components/schemas/AppMemberPropertiesPatchActionDefinition>,<#/components/schemas/AppMemberQueryActionDefinition>,<#/components/schemas/AppMemberDeleteActionDefinition>",
              },
            ],
            "instance": {
              "type": "invalid",
            },
            "options": {
              "base": "#",
              "nestedErrors": true,
            },
            "path": [
              "actions",
              "onSubmit",
            ],
            "propertyPath": "instance.actions.onSubmit",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AnalyticsActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ControllerActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ConditionActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogErrorActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogOkActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DownloadActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EachActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EmailActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EventActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowBackActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowFinishActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowNextActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowCancelActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowToActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkBackActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkNextActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LogActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/MatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/MessageActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/NoopActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/NotifyActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/RequestActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceCountActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceCreateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceGetActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceHistoryGetActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionStatusActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionSubscribeActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionToggleActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourcePatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ShareActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StaticActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageAppendActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageSubtractActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageReadActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageWriteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberInviteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberRoleUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ThrowActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberLoginActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberLogoutActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberRegisterActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberInviteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberRoleUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberCurrentPatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberPropertiesPatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberDeleteActionDefinition",
                },
              ],
            },
          },
        },
        "instance": {
          "type": "invalid",
        },
        "message": "does not match allOf schema [subschema 1] with 110 error[s]:",
        "name": "allOf",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "allOf": [
            {
              "additionalProperties": true,
              "description": "The base properties of an action definition.",
              "properties": {
                "onError": {
                  "$ref": "#/components/schemas/ActionDefinition",
                  "description": "Another action that is dispatched when the action has failed to dispatch successfully.",
                },
                "onSuccess": {
                  "$ref": "#/components/schemas/ActionDefinition",
                  "description": "Another action that is dispatched when the action has been dispatched successfully.",
                },
                "remapAfter": {
                  "$ref": "#/components/schemas/RemapperDefinition",
                  "description": "This may be used to remap data after it is passed into the action function.",
                },
                "remapBefore": {
                  "$ref": "#/components/schemas/RemapperDefinition",
                  "description": "This may be used to remap data before it is passed into the action function.",
                },
              },
              "type": "object",
            },
            {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AnalyticsActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ControllerActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ConditionActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogErrorActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DialogOkActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/DownloadActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EachActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EmailActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/EventActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowBackActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowFinishActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowNextActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowCancelActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/FlowToActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkBackActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LinkNextActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/LogActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/MatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/MessageActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/NoopActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/NotifyActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/RequestActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceCountActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceCreateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceGetActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceHistoryGetActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionStatusActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionSubscribeActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionToggleActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourceUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ResourcePatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ShareActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StaticActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageAppendActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageSubtractActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageReadActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageWriteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/StorageDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberInviteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberDeleteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupMemberRoleUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/GroupQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/ThrowActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberLoginActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberLogoutActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberRegisterActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberInviteActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberRoleUpdateActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberCurrentPatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberPropertiesPatchActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberQueryActionDefinition",
                },
                {
                  "$ref": "#/components/schemas/AppMemberDeleteActionDefinition",
                },
              ],
            },
          ],
        },
        "stack": "instance.actions.onSubmit does not match allOf schema [subschema 1] with 110 error[s]:",
      },
      {
        "argument": "target",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "target"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "config": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper whose result will be sent to Google Analytics as additional context",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "target": {
              "description": "The name of the analytics target event to send.",
              "type": "string",
            },
            "type": {
              "description": "This action sends a Google Analytics event.

It returns the input data.
",
              "enum": [
                "analytics",
              ],
            },
          },
          "required": [
            "type",
            "target",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "target"",
      },
      {
        "argument": [
          "analytics",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: analytics",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "This action sends a Google Analytics event.

It returns the input data.
",
          "enum": [
            "analytics",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: analytics",
      },
      {
        "argument": "handler",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "handler"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "handler": {
              "description": "The name of the function in the controller that will handle the action",
              "type": "string",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Use the controller to handle the action.",
              "enum": [
                "controller",
              ],
            },
          },
          "required": [
            "type",
            "handler",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "handler"",
      },
      {
        "argument": [
          "controller",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: controller",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Use the controller to handle the action.",
          "enum": [
            "controller",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: controller",
      },
      {
        "argument": "if",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "if"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "else": {
              "$ref": "#/components/schemas/ActionDefinition",
              "description": "This action is called if the \`if\` remapper yields a falsy value.",
            },
            "if": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper to determine the condition to check.

If this yields a truthy value, the \`then\` action is called. Otherwise the \`else\` action is
called.
",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "then": {
              "$ref": "#/components/schemas/ActionDefinition",
              "description": "This action is called if the \`if\` remapper yields a truthy value.",
            },
            "type": {
              "description": "Run another action if a certain contition is met.",
              "enum": [
                "condition",
              ],
            },
          },
          "required": [
            "type",
            "if",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "if"",
      },
      {
        "argument": [
          "condition",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: condition",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Run another action if a certain contition is met.",
          "enum": [
            "condition",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: condition",
      },
      {
        "argument": "blocks",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "blocks"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "blocks": {
              "description": "A list of blocks to display in the dialog.",
              "items": {
                "$ref": "#/components/schemas/BlockDefinition",
              },
              "type": "array",
            },
            "closable": {
              "default": true,
              "description": "Whether users are allowed to close the dialog by clicking outside of it or on the close button.",
              "type": "boolean",
            },
            "fullscreen": {
              "default": false,
              "description": "Whether the dialog should be displayed full screen as if itâ€™s a new page, or as a pop-up.",
              "type": "boolean",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "title": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "An optional title to set in the dialog header.",
            },
            "type": {
              "description": "This action opens a pop-up dialog that can be used to seamlessly transition to a new set of blocks temporarily.

Dialogs can be closed by calling the [\`dialog.ok\`](#DialogOkActionDefinition) or
[\`dialog.error\`](#DialogErrorActionDefinition). Users can still manually close dialogs, which
should be supported by the app.

Blocks with the layout type \`float\` (e.g. \`action-button\`) do not work in this action.
",
              "enum": [
                "dialog",
              ],
            },
          },
          "required": [
            "type",
            "blocks",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "blocks"",
      },
      {
        "argument": [
          "dialog",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: dialog",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "This action opens a pop-up dialog that can be used to seamlessly transition to a new set of blocks temporarily.

Dialogs can be closed by calling the [\`dialog.ok\`](#DialogOkActionDefinition) or
[\`dialog.error\`](#DialogErrorActionDefinition). Users can still manually close dialogs, which
should be supported by the app.

Blocks with the layout type \`float\` (e.g. \`action-button\`) do not work in this action.
",
          "enum": [
            "dialog",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: dialog",
      },
      {
        "argument": [
          "dialog.error",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: dialog.error",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Close an open dialog.

The dialog action that opened the dialog will be rejected with the data passed to this action.
",
          "enum": [
            "dialog.error",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: dialog.error",
      },
      {
        "argument": [
          "dialog.ok",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: dialog.ok",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Close an open dialog.

The dialog action that opened the dialog will be rejected with the data passed to this action.
",
          "enum": [
            "dialog.ok",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: dialog.ok",
      },
      {
        "argument": "filename",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "filename"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "filename": {
              "description": "The filename to save the file as. This must include a file extension.",
              "pattern": "\\.",
              "type": "string",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Download the data as a file.",
              "enum": [
                "download",
              ],
            },
          },
          "required": [
            "type",
            "filename",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "filename"",
      },
      {
        "argument": [
          "download",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: download",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Download the data as a file.",
          "enum": [
            "download",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: download",
      },
      {
        "argument": "do",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "do"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "do": {
              "$ref": "#/components/schemas/ActionDefinition",
              "description": "This action is called for each item in the input array.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "serial": {
              "description": "Runs the action in series instead of parallel",
              "type": "boolean",
            },
            "type": {
              "description": "Run an action for each entry in an array.

The actions are run in parallel.

If the input is not an array, the action will be applied to the input instead.",
              "enum": [
                "each",
              ],
            },
          },
          "required": [
            "type",
            "do",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "do"",
      },
      {
        "argument": [
          "each",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: each",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Run an action for each entry in an array.

The actions are run in parallel.

If the input is not an array, the action will be applied to the input instead.",
          "enum": [
            "each",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: each",
      },
      {
        "argument": "subject",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "subject"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "attachments": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The attachments to include in the email.

The remapper must resolve to an object containing the following properties:

- \`target\`: The asset ID or link to download contents from to add as an attachment. This is mutually exclusive with \`content\`.
- \`content\`: The raw content to include as the file content. This is mutually exclusive with \`target\`.
- \`filename\`: The filename to include the attachment as.
- \`accept\` If the target is a URL, this will be set as the HTTP \`Accept\` header when downloading the file.

If the attachment is a string, it will be treated as the target.",
            },
            "bcc": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Email addresses in the BCC are hidden from other recipients.",
            },
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The body of the email. The content of the body is converted to HTML using the Markdown syntax.",
            },
            "cc": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Every email address in the CC is visible to all recipients.",
            },
            "from": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The name of the sender of the email.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "subject": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The subject of the email.",
            },
            "to": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The address the email should be sent to. Can be either in the format of \`test@example.com\`, or \`John Doe <test@example.com>\`",
            },
            "type": {
              "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
              "enum": [
                "email",
              ],
            },
          },
          "required": [
            "type",
            "subject",
            "body",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "subject"",
      },
      {
        "argument": "body",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "body"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "attachments": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The attachments to include in the email.

The remapper must resolve to an object containing the following properties:

- \`target\`: The asset ID or link to download contents from to add as an attachment. This is mutually exclusive with \`content\`.
- \`content\`: The raw content to include as the file content. This is mutually exclusive with \`target\`.
- \`filename\`: The filename to include the attachment as.
- \`accept\` If the target is a URL, this will be set as the HTTP \`Accept\` header when downloading the file.

If the attachment is a string, it will be treated as the target.",
            },
            "bcc": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Email addresses in the BCC are hidden from other recipients.",
            },
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The body of the email. The content of the body is converted to HTML using the Markdown syntax.",
            },
            "cc": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The list of additional email addresses email should be sent to. Uses the same format as \`to\`. Every email address in the CC is visible to all recipients.",
            },
            "from": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The name of the sender of the email.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "subject": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The subject of the email.",
            },
            "to": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The address the email should be sent to. Can be either in the format of \`test@example.com\`, or \`John Doe <test@example.com>\`",
            },
            "type": {
              "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
              "enum": [
                "email",
              ],
            },
          },
          "required": [
            "type",
            "subject",
            "body",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "body"",
      },
      {
        "argument": [
          "email",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: email",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "The email action can be used to send emails via the Appsemble server.

If \`to\`, \`cc\`, and \`bcc\` all end up being empty, no emails will be sent but the action will still continue as normal.
",
          "enum": [
            "email",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: email",
      },
      {
        "argument": "event",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "event"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "event": {
              "description": "The name of the event to emit.",
              "type": "string",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "This action allows for other blocks to emit data upon triggering the action.

This can be used to make blocks interact with each other, such as triggering the \`data-loader\`
block to refresh itself by sending an event action that matches the name of what the block is
listening to.
",
              "enum": [
                "event",
              ],
            },
            "waitFor": {
              "description": "If specified, the action will wait for this event to have been emitted and respond with its data.",
              "type": "string",
            },
          },
          "required": [
            "type",
            "event",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "event"",
      },
      {
        "argument": [
          "event",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: event",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "This action allows for other blocks to emit data upon triggering the action.

This can be used to make blocks interact with each other, such as triggering the \`data-loader\`
block to refresh itself by sending an event action that matches the name of what the block is
listening to.
",
          "enum": [
            "event",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: event",
      },
      {
        "argument": [
          "flow.back",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: flow.back",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "On [flow pages](#flow-page-definition-sub-pages), return to the previous page if
it is present. If this is called on the first page, nothing happens.
",
          "enum": [
            "flow.back",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: flow.back",
      },
      {
        "argument": [
          "flow.finish",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: flow.finish",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "On [flow pages](#flow-page-definition-sub-pages), triggers the
[\`onFlowFinish\`](#flow-page-actions-definition-on-flow-finish) action on the page.
",
          "enum": [
            "flow.finish",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: flow.finish",
      },
      {
        "argument": [
          "flow.next",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: flow.next",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "On [flow pages](#flow-page-definition-sub-pages), proceed to the next page if it
is present. Otherwise, the flow is considered to be complete and [\`flow.finish\`](#flowfinish) will
be called instead.
",
          "enum": [
            "flow.next",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: flow.next",
      },
      {
        "argument": [
          "flow.cancel",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: flow.cancel",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "On [flow pages](#flow-page-definition-sub-pages), cancel the ongoing flow and invoke the page's [\`onFlowFinish\`](#flow-page-actions-definition-on-flow-finish) action.",
          "enum": [
            "flow.cancel",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: flow.cancel",
      },
      {
        "argument": "step",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "step"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "step": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The name of the step to move to.

This is a remapper which gets called with the action input and context.
",
            },
            "type": {
              "description": "On [flow pages](#flow-page-definition-sub-pages), move to a specific step.",
              "enum": [
                "flow.to",
              ],
            },
          },
          "required": [
            "type",
            "step",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "step"",
      },
      {
        "argument": [
          "flow.to",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: flow.to",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "On [flow pages](#flow-page-definition-sub-pages), move to a specific step.",
          "enum": [
            "flow.to",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: flow.to",
      },
      {
        "argument": "to",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "to"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "to": {
              "anyOf": [
                {
                  "type": "string",
                },
                {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                {
                  "$ref": "#/components/schemas/RemapperDefinition",
                },
              ],
              "description": "The name of the page to link to. Subpages can be referred to using arrays. If this matches with an absolute URL, link will open this instead of matching it with a page or subpage.",
            },
            "type": {
              "description": "The link action can be used to redirect the user to other pages or absolute URLs.",
              "enum": [
                "link",
              ],
            },
          },
          "required": [
            "type",
            "to",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "to"",
      },
      {
        "argument": [
          "link",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: link",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "The link action can be used to redirect the user to other pages or absolute URLs.",
          "enum": [
            "link",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: link",
      },
      {
        "argument": [
          "link.back",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: link.back",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Link back to the previous page in the browser history.",
          "enum": [
            "link.back",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: link.back",
      },
      {
        "argument": [
          "link.next",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: link.next",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Link to the next page in the browser history.",
          "enum": [
            "link.next",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: link.next",
      },
      {
        "argument": [
          "log",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: log",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Output the result of the action into the console.

This is mostly useful for debugging blocks during development.
",
          "enum": [
            "log",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: log",
      },
      {
        "argument": "match",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "match"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "match": {
              "items": {
                "additionalProperties": false,
                "description": "",
                "properties": {
                  "action": {
                    "$ref": "#/components/schemas/ActionDefinition",
                    "description": "Action to be called if the case equals true.",
                  },
                  "case": {
                    "$ref": "#/components/schemas/RemapperDefinition",
                    "description": "The case to be matched.",
                  },
                },
                "required": [
                  "case",
                  "action",
                ],
                "type": "object",
              },
              "type": "array",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Run another action if one of the cases is true.

Only the first case that equals true is called.",
              "enum": [
                "match",
              ],
            },
          },
          "required": [
            "type",
            "match",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "match"",
      },
      {
        "argument": [
          "match",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: match",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Run another action if one of the cases is true.

Only the first case that equals true is called.",
          "enum": [
            "match",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: match",
      },
      {
        "argument": "body",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "body"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The body of the message.",
            },
            "color": {
              "default": "info",
              "description": "The Bulma color to apply to the message.",
              "enum": [
                "dark",
                "primary",
                "link",
                "success",
                "info",
                "warning",
                "danger",
              ],
            },
            "dismissable": {
              "description": "Boolean value indicating whether the user is able to dismiss the message manually.",
              "type": "boolean",
            },
            "layout": {
              "default": "bottom",
              "description": "The position of the message on the screen.",
              "enum": [
                "bottom",
                "top",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "timeout": {
              "default": 5000,
              "description": "The time in milliseconds how long the message should be visible.",
              "type": "integer",
            },
            "type": {
              "description": "Display a message to the user.

This is useful in combination with action chaining to notify users they have performed a certain action.
",
              "enum": [
                "message",
              ],
            },
          },
          "required": [
            "type",
            "body",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "body"",
      },
      {
        "argument": [
          "message",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: message",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Display a message to the user.

This is useful in combination with action chaining to notify users they have performed a certain action.
",
          "enum": [
            "message",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: message",
      },
      {
        "argument": [
          "noop",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: noop",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Do nothing when this action is triggered.

This is the default action for block actions that are not required.
",
          "enum": [
            "noop",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: noop",
      },
      {
        "argument": "title",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "title"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The description of the notification.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "title": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The title of the notification.",
            },
            "to": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
            },
            "type": {
              "description": "Send notifications to one or all the users of an app.",
              "enum": [
                "notify",
              ],
            },
          },
          "required": [
            "type",
            "title",
            "body",
            "to",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "title"",
      },
      {
        "argument": "body",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "body"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The description of the notification.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "title": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The title of the notification.",
            },
            "to": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
            },
            "type": {
              "description": "Send notifications to one or all the users of an app.",
              "enum": [
                "notify",
              ],
            },
          },
          "required": [
            "type",
            "title",
            "body",
            "to",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "body"",
      },
      {
        "argument": "to",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "to"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The description of the notification.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "title": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The title of the notification.",
            },
            "to": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "To whom the notification should be sent.

Use \`all\` to send the notification to all app subscribed users.
Or notify specific users by passing either a single user id or an array of user ids.

Nothing is sent if the value is **not** a valid user id.
",
            },
            "type": {
              "description": "Send notifications to one or all the users of an app.",
              "enum": [
                "notify",
              ],
            },
          },
          "required": [
            "type",
            "title",
            "body",
            "to",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "to"",
      },
      {
        "argument": [
          "notify",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: notify",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Send notifications to one or all the users of an app.",
          "enum": [
            "notify",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: notify",
      },
      {
        "argument": "url",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "url"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "method": {
              "default": "get",
              "description": "The type of request to make.",
              "enum": [
                "delete",
                "get",
                "patch",
                "post",
                "put",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Performs an HTTP request.

This can be used to call the Appsemble API or an external API in order to fetch data or send data.
When sending \`POST\`, \`PUT\`, \`DELETE\` and \`PATCH\` calls the data that is currently available
in the block gets passed through.

If the content type of the request is \`text/xml\` or \`application/xml\`, the data will be
converted to JSON.
",
              "enum": [
                "request",
              ],
            },
            "url": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in the URL to send the request to.

Can be a relative URL (E.g. \`/api/health\`) for usage with the Appsemble API, or an absolute URL
(E.g. \`https://example.com\`) for usage with external sites.",
            },
          },
          "required": [
            "type",
            "url",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "url"",
      },
      {
        "argument": [
          "request",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: request",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Performs an HTTP request.

This can be used to call the Appsemble API or an external API in order to fetch data or send data.
When sending \`POST\`, \`PUT\`, \`DELETE\` and \`PATCH\` calls the data that is currently available
in the block gets passed through.

If the content type of the request is \`text/xml\` or \`application/xml\`, the data will be
converted to JSON.
",
          "enum": [
            "request",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: request",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "own": {
              "description": "If only the resources created by the authenticated app member should be included",
              "type": "boolean",
            },
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to count.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Count the number of resources a similar \`resource.query\` action would return.",
              "enum": [
                "resource.count",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.count",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.count",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Count the number of resources a similar \`resource.query\` action would return.",
          "enum": [
            "resource.count",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.count",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to create.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Create a resource.",
              "enum": [
                "resource.create",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.create",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.create",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Create a resource.",
          "enum": [
            "resource.create",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.create",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to delete.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Delete a resource.",
              "enum": [
                "resource.delete",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.delete",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.delete",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Delete a resource.",
          "enum": [
            "resource.delete",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.delete",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to get.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Get a single resource.",
              "enum": [
                "resource.get",
              ],
            },
            "view": {
              "description": "The view to use for the resource.",
              "type": "string",
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.get",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.get",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Get a single resource.",
          "enum": [
            "resource.get",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.get",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "method": {
              "default": "get",
              "description": "The type of request to make.",
              "enum": [
                "delete",
                "get",
                "patch",
                "post",
                "put",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to get.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Get the complete history of a resource.",
              "enum": [
                "resource.history.get",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.history.get",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.history.get",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Get the complete history of a resource.",
          "enum": [
            "resource.history.get",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.history.get",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "own": {
              "description": "If only the resources created by the authenticated app member should be included",
              "type": "boolean",
            },
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to query.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Query a list of resources.",
              "enum": [
                "resource.query",
              ],
            },
            "view": {
              "description": "The view to use for the resource.",
              "type": "string",
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.query",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.query",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Query a list of resources.",
          "enum": [
            "resource.query",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.query",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "action": {
              "description": "The resource action type to get the subscription state for.",
              "enum": [
                "create",
                "delete",
                "update",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to get the subscription state for.",
              "type": "string",
            },
            "type": {
              "description": "Get the status of whether or not the user is subscriped to notifications for resource modifications.",
              "enum": [
                "resource.subscription.status",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.subscription.status",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.subscription.status",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Get the status of whether or not the user is subscriped to notifications for resource modifications.",
          "enum": [
            "resource.subscription.status",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.status",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "action": {
              "description": "The resource action type to subscribe to.",
              "enum": [
                "create",
                "delete",
                "update",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to subscribe to.",
              "type": "string",
            },
            "type": {
              "description": "Subscribe to notifications on resource modifications.",
              "enum": [
                "resource.subscription.subscribe",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.subscription.subscribe",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.subscription.subscribe",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Subscribe to notifications on resource modifications.",
          "enum": [
            "resource.subscription.subscribe",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.subscribe",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "action": {
              "description": "The resource action type to toggle the subscription state for.",
              "enum": [
                "create",
                "delete",
                "update",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to toggle the subscription state for.",
              "type": "string",
            },
            "type": {
              "description": "Toggle whether or not to receive notifications on resource modifications.",
              "enum": [
                "resource.subscription.toggle",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.subscription.toggle",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.subscription.toggle",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Toggle whether or not to receive notifications on resource modifications.",
          "enum": [
            "resource.subscription.toggle",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.toggle",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "action": {
              "description": "The resource action type to unsubscribe from.",
              "enum": [
                "create",
                "delete",
                "update",
              ],
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to unsubscribe from.",
              "type": "string",
            },
            "type": {
              "description": "Unsubscribe from notifications on resource modifications.",
              "enum": [
                "resource.subscription.unsubscribe",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.subscription.unsubscribe",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.subscription.unsubscribe",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Unsubscribe from notifications on resource modifications.",
          "enum": [
            "resource.subscription.unsubscribe",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.subscription.unsubscribe",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to update.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Update a resource.",
              "enum": [
                "resource.update",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.update",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.update",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Update a resource.",
          "enum": [
            "resource.update",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.update",
      },
      {
        "argument": "resource",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "resource"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "body": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "remapper that results in the request body to send.

If not specified, the raw input data is used.
",
            },
            "onError": {},
            "onSuccess": {},
            "proxy": {
              "default": true,
              "description": "By default requests will be proxied through the Appsemble API.

This allows to protect user data and ensures
[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be
disabled by setting this to \`false\`
",
              "type": "boolean",
            },
            "query": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "resource": {
              "description": "The type of the resource to patch.",
              "type": "string",
            },
            "schema": {
              "$ref": "#/components/schemas/JSONSchema",
              "description": "The name of the schema to validate against before submitting data.",
            },
            "type": {
              "description": "Patch a resource.",
              "enum": [
                "resource.patch",
              ],
            },
          },
          "required": [
            "type",
            "resource",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "resource"",
      },
      {
        "argument": [
          "resource.patch",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: resource.patch",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Patch a resource.",
          "enum": [
            "resource.patch",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: resource.patch",
      },
      {
        "argument": [
          "share",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: share",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "The \`share\` action can be used to display a prompt that allows the user to share something with others, primarily via social media.

Depending on whether the userâ€™s browser supports a native share function it will either display a
native dialog for sharing links, or display a more limited fallback in a dialog.
",
          "enum": [
            "share",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: share",
      },
      {
        "argument": "value",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "value"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "The \`static\` action returns static data defined in the action definition.

This is useful for example for stubbing data.
",
              "enum": [
                "static",
              ],
            },
            "value": {
              "description": "The static value to return.",
            },
          },
          "required": [
            "type",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "value"",
      },
      {
        "argument": [
          "static",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: static",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "The \`static\` action returns static data defined in the action definition.

This is useful for example for stubbing data.
",
          "enum": [
            "static",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: static",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
              "enum": [
                "storage.append",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to write on top of the storage entry.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": "value",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "value"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
              "enum": [
                "storage.append",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to write on top of the storage entry.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "value"",
      },
      {
        "argument": [
          "storage.append",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.append",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Append data to an existing array in storage.
      If the storage entry is a single object, it turns it into an array to append the data on.

For example:
\`\`\`yaml
type: storage.append
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text:
      This is a new data item
    value:
      1
\`\`\`
",
          "enum": [
            "storage.append",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.append",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to read the data from.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Subtract last item from a storage entry.

      If the entry consists of only one item, turns it into a singular object.

      If the entry is a single item, the entry is removed entirely.

For example:
\`\`\`yaml
type: storage.subtract
key: temp
storage: localStorage
\`\`\`
        ",
              "enum": [
                "storage.subtract",
              ],
            },
          },
          "required": [
            "type",
            "key",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": [
          "storage.subtract",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.subtract",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Subtract last item from a storage entry.

      If the entry consists of only one item, turns it into a singular object.

      If the entry is a single item, the entry is removed entirely.

For example:
\`\`\`yaml
type: storage.subtract
key: temp
storage: localStorage
\`\`\`
        ",
          "enum": [
            "storage.subtract",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.subtract",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to read the data from.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Read data from the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.read
key: temp
storage: localStorage
\`\`\`

      ",
              "enum": [
                "storage.read",
              ],
            },
          },
          "required": [
            "type",
            "key",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": [
          "storage.read",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.read",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Read data from the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.read
key: temp
storage: localStorage
\`\`\`

      ",
          "enum": [
            "storage.read",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.read",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
              "enum": [
                "storage.write",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to write to the storage entry.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": "value",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "value"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
              "enum": [
                "storage.write",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to write to the storage entry.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "value"",
      },
      {
        "argument": [
          "storage.write",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.write",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Write data to the appâ€™s local storage.

For example:
\`\`\`yaml
type: storage.write
key: temp
value: { root }
storage: localStorage
remapBefore:
  object.from:
    data:
      cool data
    value:
      1
\`\`\`
      ",
          "enum": [
            "storage.write",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.write",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "item": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the item in an array to update.",
            },
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
              "enum": [
                "storage.update",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to update the specified item with.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": "value",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "value"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "item": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the item in an array to update.",
            },
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to store the data.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
              "enum": [
                "storage.update",
              ],
            },
            "value": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The data to update the specified item with.",
            },
          },
          "required": [
            "type",
            "key",
            "value",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "value"",
      },
      {
        "argument": [
          "storage.update",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.update",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Update an existing item in storage, or update an item inside a stored array.

For example:
\`\`\`yaml
type: storage.update
key: temp
item: 1
value: { root }
storage: localStorage
remapBefore:
  object.from:
    text: { prop: text }
    value: { prop: value }
    newField: "New field"
\`\`\`
      ",
          "enum": [
            "storage.update",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.update",
      },
      {
        "argument": "key",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "key"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "key": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The key of the storage entry to remove.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "storage": {
              "default": "indexedDB",
              "description": "The mechanism used to remove the data from.",
              "enum": [
                "indexedDB",
                "localStorage",
                "sessionStorage",
                "appStorage",
              ],
            },
            "type": {
              "description": "Delete the item that is stored at the specified key.

For example:
\`\`\`yaml
type: storage.delete
key: temp
storage: localStorage
\`\`\`
      ",
              "enum": [
                "storage.delete",
              ],
            },
          },
          "required": [
            "type",
            "key",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "key"",
      },
      {
        "argument": [
          "storage.delete",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: storage.delete",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Delete the item that is stored at the specified key.

For example:
\`\`\`yaml
type: storage.delete
key: temp
storage: localStorage
\`\`\`
      ",
          "enum": [
            "storage.delete",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: storage.delete",
      },
      {
        "argument": [
          "group.member.invite",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: group.member.invite",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Invite an app member to join a group.",
          "enum": [
            "group.member.invite",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.invite",
      },
      {
        "argument": "id",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "id"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The ID of a specific group to get the members from",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Get a list of a group's members",
              "enum": [
                "group.member.query",
              ],
            },
          },
          "required": [
            "type",
            "id",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "id"",
      },
      {
        "argument": [
          "group.member.query",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: group.member.query",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Get a list of a group's members",
          "enum": [
            "group.member.query",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.query",
      },
      {
        "argument": "id",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "id"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The id of the group member to delete",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Allow a user to join a group.",
              "enum": [
                "group.member.delete",
              ],
            },
          },
          "required": [
            "type",
            "id",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "id"",
      },
      {
        "argument": [
          "group.member.delete",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: group.member.delete",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allow a user to join a group.",
          "enum": [
            "group.member.delete",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.delete",
      },
      {
        "argument": "id",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "id"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The id of the group member to update the role of.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "role": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The new role of the group member.",
            },
            "type": {
              "description": "Update the role of a group member.",
              "enum": [
                "group.member.role.update",
              ],
            },
          },
          "required": [
            "type",
            "id",
            "role",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "id"",
      },
      {
        "argument": "role",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "role"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "id": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The id of the group member to update the role of.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "role": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The new role of the group member.",
            },
            "type": {
              "description": "Update the role of a group member.",
              "enum": [
                "group.member.role.update",
              ],
            },
          },
          "required": [
            "type",
            "id",
            "role",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "role"",
      },
      {
        "argument": [
          "group.member.role.update",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: group.member.role.update",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Update the role of a group member.",
          "enum": [
            "group.member.role.update",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: group.member.role.update",
      },
      {
        "argument": [
          "group.query",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: group.query",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Get a list of all of the groups in an app.",
          "enum": [
            "group.query",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: group.query",
      },
      {
        "argument": [
          "throw",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: throw",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "This action throws a new exception based on the data that is passed through.

This can be used to create a custom error that ends up in the error action handler.
",
          "enum": [
            "throw",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: throw",
      },
      {
        "argument": [
          "app.member.login",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.login",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to login using an email address and a password.

Does nothing if the app member is already logged in.",
          "enum": [
            "app.member.login",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.login",
      },
      {
        "argument": [
          "app.member.logout",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.logout",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allow the app members to log out of the application.",
          "enum": [
            "app.member.logout",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.logout",
      },
      {
        "argument": "email",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "email"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "email": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The email to log in with.",
            },
            "login": {
              "default": true,
              "description": "Whether to login after registering.",
              "type": "boolean",
            },
            "name": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The full name of the app member.",
            },
            "onError": {},
            "onSuccess": {},
            "password": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The password to log in with.",
            },
            "picture": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The image to use for the profile picture of the app member.",
            },
            "properties": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
              "enum": [
                "app.member.register",
              ],
            },
          },
          "required": [
            "type",
            "email",
            "password",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "email"",
      },
      {
        "argument": "password",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "password"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "email": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The email to log in with.",
            },
            "login": {
              "default": true,
              "description": "Whether to login after registering.",
              "type": "boolean",
            },
            "name": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The full name of the app member.",
            },
            "onError": {},
            "onSuccess": {},
            "password": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The password to log in with.",
            },
            "picture": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The image to use for the profile picture of the app member.",
            },
            "properties": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "type": {
              "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
              "enum": [
                "app.member.register",
              ],
            },
          },
          "required": [
            "type",
            "email",
            "password",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "password"",
      },
      {
        "argument": [
          "app.member.register",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.register",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to register using an email address and a password.

Does nothing if the app member is already logged in.",
          "enum": [
            "app.member.register",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.register",
      },
      {
        "argument": "email",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "email"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "email": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The email to invite.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "role": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The role of the invited app member.",
            },
            "type": {
              "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
              "enum": [
                "app.member.invite",
              ],
            },
          },
          "required": [
            "type",
            "email",
            "role",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "email"",
      },
      {
        "argument": "role",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "role"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "email": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The email to invite.",
            },
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "role": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The role of the invited app member.",
            },
            "type": {
              "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
              "enum": [
                "app.member.invite",
              ],
            },
          },
          "required": [
            "type",
            "email",
            "role",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "role"",
      },
      {
        "argument": [
          "app.member.invite",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.invite",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to invite another app member using an email address and a role.

Does nothing if the app member is not logged in.",
          "enum": [
            "app.member.invite",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.invite",
      },
      {
        "argument": "sub",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "sub"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "role": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The updated role of the app member.

The role must exist in the roles property of the app's security definition or in the predefined app roles in the system -
\`Member\`, \`MembersManager\`, \`GroupMembersManager\`, \`GroupsManager\`, \`ResourcesManager\` and \`Owner\`",
            },
            "sub": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The id of the app member.",
            },
            "type": {
              "description": "Allows the app member to update the role of another app member account.

Does nothing if the app member isnâ€™t logged in.",
              "enum": [
                "app.member.role.update",
              ],
            },
          },
          "required": [
            "type",
            "sub",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "sub"",
      },
      {
        "argument": [
          "app.member.role.update",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.role.update",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to update the role of another app member account.

Does nothing if the app member isnâ€™t logged in.",
          "enum": [
            "app.member.role.update",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.role.update",
      },
      {
        "argument": [
          "app.member.current.patch",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.current.patch",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to patch their own app member account.

Does nothing if the app member isnâ€™t logged in.",
          "enum": [
            "app.member.current.patch",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.current.patch",
      },
      {
        "argument": "sub",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "sub"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "properties": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The updated custom properties for the app member.

Values will be validated based on \`members.properties\`, if defined in the app definition.",
            },
            "remapAfter": {},
            "remapBefore": {},
            "sub": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The new full name name of the app member.",
            },
            "type": {
              "description": "Allows the app member to patch the properties of another app member account.

Does nothing if the app member isnâ€™t logged in.",
              "enum": [
                "app.member.properties.patch",
              ],
            },
          },
          "required": [
            "type",
            "sub",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "sub"",
      },
      {
        "argument": [
          "app.member.properties.patch",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.properties.patch",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to patch the properties of another app member account.

Does nothing if the app member isnâ€™t logged in.",
          "enum": [
            "app.member.properties.patch",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.properties.patch",
      },
      {
        "argument": [
          "app.member.query",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.query",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the currently logged in app member to fetch a list of app members by their roles.

Does nothing if the app member isnâ€™t logged in.",
          "enum": [
            "app.member.query",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.query",
      },
      {
        "argument": "sub",
        "instance": {
          "type": "invalid",
        },
        "message": "requires property "sub"",
        "name": "required",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "additionalProperties": false,
          "properties": {
            "onError": {},
            "onSuccess": {},
            "remapAfter": {},
            "remapBefore": {},
            "sub": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The id of the app member to be deleted.",
            },
            "type": {
              "description": "Allows the app member to delete another app member.

Does nothing if the app member isnâ€™t logged in.",
              "enum": [
                "app.member.delete",
              ],
            },
          },
          "required": [
            "type",
            "sub",
          ],
          "type": "object",
        },
        "stack": "instance.actions.onSubmit requires property "sub"",
      },
      {
        "argument": [
          "app.member.delete",
        ],
        "instance": "invalid",
        "message": "is not one of enum values: app.member.delete",
        "name": "enum",
        "path": [
          "actions",
          "onSubmit",
          "type",
        ],
        "property": "instance.actions.onSubmit.type",
        "schema": {
          "description": "Allows the app member to delete another app member.

Does nothing if the app member isnâ€™t logged in.",
          "enum": [
            "app.member.delete",
          ],
        },
        "stack": "instance.actions.onSubmit.type is not one of enum values: app.member.delete",
      },
      {
        "argument": [
          "<#/components/schemas/AnalyticsActionDefinition>",
          "<#/components/schemas/ControllerActionDefinition>",
          "<#/components/schemas/ConditionActionDefinition>",
          "<#/components/schemas/DialogActionDefinition>",
          "<#/components/schemas/DialogErrorActionDefinition>",
          "<#/components/schemas/DialogOkActionDefinition>",
          "<#/components/schemas/DownloadActionDefinition>",
          "<#/components/schemas/EachActionDefinition>",
          "<#/components/schemas/EmailActionDefinition>",
          "<#/components/schemas/EventActionDefinition>",
          "<#/components/schemas/FlowBackActionDefinition>",
          "<#/components/schemas/FlowFinishActionDefinition>",
          "<#/components/schemas/FlowNextActionDefinition>",
          "<#/components/schemas/FlowCancelActionDefinition>",
          "<#/components/schemas/FlowToActionDefinition>",
          "<#/components/schemas/LinkActionDefinition>",
          "<#/components/schemas/LinkBackActionDefinition>",
          "<#/components/schemas/LinkNextActionDefinition>",
          "<#/components/schemas/LogActionDefinition>",
          "<#/components/schemas/MatchActionDefinition>",
          "<#/components/schemas/MessageActionDefinition>",
          "<#/components/schemas/NoopActionDefinition>",
          "<#/components/schemas/NotifyActionDefinition>",
          "<#/components/schemas/RequestActionDefinition>",
          "<#/components/schemas/ResourceCountActionDefinition>",
          "<#/components/schemas/ResourceCreateActionDefinition>",
          "<#/components/schemas/ResourceDeleteActionDefinition>",
          "<#/components/schemas/ResourceGetActionDefinition>",
          "<#/components/schemas/ResourceHistoryGetActionDefinition>",
          "<#/components/schemas/ResourceQueryActionDefinition>",
          "<#/components/schemas/ResourceSubscriptionStatusActionDefinition>",
          "<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>",
          "<#/components/schemas/ResourceSubscriptionToggleActionDefinition>",
          "<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>",
          "<#/components/schemas/ResourceUpdateActionDefinition>",
          "<#/components/schemas/ResourcePatchActionDefinition>",
          "<#/components/schemas/ShareActionDefinition>",
          "<#/components/schemas/StaticActionDefinition>",
          "<#/components/schemas/StorageAppendActionDefinition>",
          "<#/components/schemas/StorageSubtractActionDefinition>",
          "<#/components/schemas/StorageReadActionDefinition>",
          "<#/components/schemas/StorageWriteActionDefinition>",
          "<#/components/schemas/StorageUpdateActionDefinition>",
          "<#/components/schemas/StorageDeleteActionDefinition>",
          "<#/components/schemas/GroupMemberInviteActionDefinition>",
          "<#/components/schemas/GroupMemberQueryActionDefinition>",
          "<#/components/schemas/GroupMemberDeleteActionDefinition>",
          "<#/components/schemas/GroupMemberRoleUpdateActionDefinition>",
          "<#/components/schemas/GroupQueryActionDefinition>",
          "<#/components/schemas/ThrowActionDefinition>",
          "<#/components/schemas/AppMemberLoginActionDefinition>",
          "<#/components/schemas/AppMemberLogoutActionDefinition>",
          "<#/components/schemas/AppMemberRegisterActionDefinition>",
          "<#/components/schemas/AppMemberInviteActionDefinition>",
          "<#/components/schemas/AppMemberRoleUpdateActionDefinition>",
          "<#/components/schemas/AppMemberCurrentPatchActionDefinition>",
          "<#/components/schemas/AppMemberPropertiesPatchActionDefinition>",
          "<#/components/schemas/AppMemberQueryActionDefinition>",
          "<#/components/schemas/AppMemberDeleteActionDefinition>",
        ],
        "instance": {
          "type": "invalid",
        },
        "message": "is not any of <#/components/schemas/AnalyticsActionDefinition>,<#/components/schemas/ControllerActionDefinition>,<#/components/schemas/ConditionActionDefinition>,<#/components/schemas/DialogActionDefinition>,<#/components/schemas/DialogErrorActionDefinition>,<#/components/schemas/DialogOkActionDefinition>,<#/components/schemas/DownloadActionDefinition>,<#/components/schemas/EachActionDefinition>,<#/components/schemas/EmailActionDefinition>,<#/components/schemas/EventActionDefinition>,<#/components/schemas/FlowBackActionDefinition>,<#/components/schemas/FlowFinishActionDefinition>,<#/components/schemas/FlowNextActionDefinition>,<#/components/schemas/FlowCancelActionDefinition>,<#/components/schemas/FlowToActionDefinition>,<#/components/schemas/LinkActionDefinition>,<#/components/schemas/LinkBackActionDefinition>,<#/components/schemas/LinkNextActionDefinition>,<#/components/schemas/LogActionDefinition>,<#/components/schemas/MatchActionDefinition>,<#/components/schemas/MessageActionDefinition>,<#/components/schemas/NoopActionDefinition>,<#/components/schemas/NotifyActionDefinition>,<#/components/schemas/RequestActionDefinition>,<#/components/schemas/ResourceCountActionDefinition>,<#/components/schemas/ResourceCreateActionDefinition>,<#/components/schemas/ResourceDeleteActionDefinition>,<#/components/schemas/ResourceGetActionDefinition>,<#/components/schemas/ResourceHistoryGetActionDefinition>,<#/components/schemas/ResourceQueryActionDefinition>,<#/components/schemas/ResourceSubscriptionStatusActionDefinition>,<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>,<#/components/schemas/ResourceSubscriptionToggleActionDefinition>,<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>,<#/components/schemas/ResourceUpdateActionDefinition>,<#/components/schemas/ResourcePatchActionDefinition>,<#/components/schemas/ShareActionDefinition>,<#/components/schemas/StaticActionDefinition>,<#/components/schemas/StorageAppendActionDefinition>,<#/components/schemas/StorageSubtractActionDefinition>,<#/components/schemas/StorageReadActionDefinition>,<#/components/schemas/StorageWriteActionDefinition>,<#/components/schemas/StorageUpdateActionDefinition>,<#/components/schemas/StorageDeleteActionDefinition>,<#/components/schemas/GroupMemberInviteActionDefinition>,<#/components/schemas/GroupMemberQueryActionDefinition>,<#/components/schemas/GroupMemberDeleteActionDefinition>,<#/components/schemas/GroupMemberRoleUpdateActionDefinition>,<#/components/schemas/GroupQueryActionDefinition>,<#/components/schemas/ThrowActionDefinition>,<#/components/schemas/AppMemberLoginActionDefinition>,<#/components/schemas/AppMemberLogoutActionDefinition>,<#/components/schemas/AppMemberRegisterActionDefinition>,<#/components/schemas/AppMemberInviteActionDefinition>,<#/components/schemas/AppMemberRoleUpdateActionDefinition>,<#/components/schemas/AppMemberCurrentPatchActionDefinition>,<#/components/schemas/AppMemberPropertiesPatchActionDefinition>,<#/components/schemas/AppMemberQueryActionDefinition>,<#/components/schemas/AppMemberDeleteActionDefinition>",
        "name": "anyOf",
        "path": [
          "actions",
          "onSubmit",
        ],
        "property": "instance.actions.onSubmit",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/AnalyticsActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ControllerActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ConditionActionDefinition",
            },
            {
              "$ref": "#/components/schemas/DialogActionDefinition",
            },
            {
              "$ref": "#/components/schemas/DialogErrorActionDefinition",
            },
            {
              "$ref": "#/components/schemas/DialogOkActionDefinition",
            },
            {
              "$ref": "#/components/schemas/DownloadActionDefinition",
            },
            {
              "$ref": "#/components/schemas/EachActionDefinition",
            },
            {
              "$ref": "#/components/schemas/EmailActionDefinition",
            },
            {
              "$ref": "#/components/schemas/EventActionDefinition",
            },
            {
              "$ref": "#/components/schemas/FlowBackActionDefinition",
            },
            {
              "$ref": "#/components/schemas/FlowFinishActionDefinition",
            },
            {
              "$ref": "#/components/schemas/FlowNextActionDefinition",
            },
            {
              "$ref": "#/components/schemas/FlowCancelActionDefinition",
            },
            {
              "$ref": "#/components/schemas/FlowToActionDefinition",
            },
            {
              "$ref": "#/components/schemas/LinkActionDefinition",
            },
            {
              "$ref": "#/components/schemas/LinkBackActionDefinition",
            },
            {
              "$ref": "#/components/schemas/LinkNextActionDefinition",
            },
            {
              "$ref": "#/components/schemas/LogActionDefinition",
            },
            {
              "$ref": "#/components/schemas/MatchActionDefinition",
            },
            {
              "$ref": "#/components/schemas/MessageActionDefinition",
            },
            {
              "$ref": "#/components/schemas/NoopActionDefinition",
            },
            {
              "$ref": "#/components/schemas/NotifyActionDefinition",
            },
            {
              "$ref": "#/components/schemas/RequestActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceCountActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceCreateActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceDeleteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceGetActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceHistoryGetActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceQueryActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceSubscriptionStatusActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceSubscriptionSubscribeActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceSubscriptionToggleActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourceUpdateActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ResourcePatchActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ShareActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StaticActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageAppendActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageSubtractActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageReadActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageWriteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageUpdateActionDefinition",
            },
            {
              "$ref": "#/components/schemas/StorageDeleteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/GroupMemberInviteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/GroupMemberQueryActionDefinition",
            },
            {
              "$ref": "#/components/schemas/GroupMemberDeleteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/GroupMemberRoleUpdateActionDefinition",
            },
            {
              "$ref": "#/components/schemas/GroupQueryActionDefinition",
            },
            {
              "$ref": "#/components/schemas/ThrowActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberLoginActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberLogoutActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberRegisterActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberInviteActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberRoleUpdateActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberCurrentPatchActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberPropertiesPatchActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberQueryActionDefinition",
            },
            {
              "$ref": "#/components/schemas/AppMemberDeleteActionDefinition",
            },
          ],
        },
        "stack": "instance.actions.onSubmit is not any of <#/components/schemas/AnalyticsActionDefinition>,<#/components/schemas/ControllerActionDefinition>,<#/components/schemas/ConditionActionDefinition>,<#/components/schemas/DialogActionDefinition>,<#/components/schemas/DialogErrorActionDefinition>,<#/components/schemas/DialogOkActionDefinition>,<#/components/schemas/DownloadActionDefinition>,<#/components/schemas/EachActionDefinition>,<#/components/schemas/EmailActionDefinition>,<#/components/schemas/EventActionDefinition>,<#/components/schemas/FlowBackActionDefinition>,<#/components/schemas/FlowFinishActionDefinition>,<#/components/schemas/FlowNextActionDefinition>,<#/components/schemas/FlowCancelActionDefinition>,<#/components/schemas/FlowToActionDefinition>,<#/components/schemas/LinkActionDefinition>,<#/components/schemas/LinkBackActionDefinition>,<#/components/schemas/LinkNextActionDefinition>,<#/components/schemas/LogActionDefinition>,<#/components/schemas/MatchActionDefinition>,<#/components/schemas/MessageActionDefinition>,<#/components/schemas/NoopActionDefinition>,<#/components/schemas/NotifyActionDefinition>,<#/components/schemas/RequestActionDefinition>,<#/components/schemas/ResourceCountActionDefinition>,<#/components/schemas/ResourceCreateActionDefinition>,<#/components/schemas/ResourceDeleteActionDefinition>,<#/components/schemas/ResourceGetActionDefinition>,<#/components/schemas/ResourceHistoryGetActionDefinition>,<#/components/schemas/ResourceQueryActionDefinition>,<#/components/schemas/ResourceSubscriptionStatusActionDefinition>,<#/components/schemas/ResourceSubscriptionSubscribeActionDefinition>,<#/components/schemas/ResourceSubscriptionToggleActionDefinition>,<#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition>,<#/components/schemas/ResourceUpdateActionDefinition>,<#/components/schemas/ResourcePatchActionDefinition>,<#/components/schemas/ShareActionDefinition>,<#/components/schemas/StaticActionDefinition>,<#/components/schemas/StorageAppendActionDefinition>,<#/components/schemas/StorageSubtractActionDefinition>,<#/components/schemas/StorageReadActionDefinition>,<#/components/schemas/StorageWriteActionDefinition>,<#/components/schemas/StorageUpdateActionDefinition>,<#/components/schemas/StorageDeleteActionDefinition>,<#/components/schemas/GroupMemberInviteActionDefinition>,<#/components/schemas/GroupMemberQueryActionDefinition>,<#/components/schemas/GroupMemberDeleteActionDefinition>,<#/components/schemas/GroupMemberRoleUpdateActionDefinition>,<#/components/schemas/GroupQueryActionDefinition>,<#/components/schemas/ThrowActionDefinition>,<#/components/schemas/AppMemberLoginActionDefinition>,<#/components/schemas/AppMemberLogoutActionDefinition>,<#/components/schemas/AppMemberRegisterActionDefinition>,<#/components/schemas/AppMemberInviteActionDefinition>,<#/components/schemas/AppMemberRoleUpdateActionDefinition>,<#/components/schemas/AppMemberCurrentPatchActionDefinition>,<#/components/schemas/AppMemberPropertiesPatchActionDefinition>,<#/components/schemas/AppMemberQueryActionDefinition>,<#/components/schemas/AppMemberDeleteActionDefinition>",
      },
    ],
  },
  "error": "Bad Request",
  "message": "Validation failed for block example",
  "statusCode": 400,
}
`;
