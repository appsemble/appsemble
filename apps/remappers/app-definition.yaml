name: Remappers
description: This app contains every Remapper currently in Appsemble as of (0.23.4)
defaultPage: Introduction

security:
  default:
    role: User
    policy: everyone
  roles:
    User:
      description: user

resources:
  people:
    roles:
      - $public
    schema:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        city:
          type: string
        email:
          type: string

anchors:
  - &block-version 0.23.4

pages:
  - name: Introduction
    blocks:
      - type: markdown
        version: *block-version
        parameters:
          content: |
            # Welcome
            This is a list of how to use all the existing remappers.
            To see how these remappers work exactly, clone the app or check the app definition.

            Topics:
              - [Strings](/strings)
              - [Objects](/objects)
              - [Arrays](/arrays)
              - [Data](/data)
              - [History](/history)
              - [Conditionals](/conditionals)
              - [Dates](/dates)
              - [Randomness](/randomness)
              - [Other](/other)
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.query
            resource: people
            remapAfter:
              - array.map:
                  if:
                    condition:
                      equals:
                        - prop: city
                        - 'Eindhoven'
                    then:
                      object.omit:
                        - City
                    else: null
              - null.strip: null
            onSuccess:
              type: noop
        events:
          emit:
            data: peopleInEindhoven
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
        events:
          listen:
            data: peopleInEindhoven

  - name: Strings
    blocks:
      # Introduction
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## Introduction
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              array.from:
                - object.from:
                    firstName: Peter
                    lastName: Parker
                    department: Photography
                - object.from:
                    firstName: John
                    lastName: Jameson
                    department: Editor
            type: noop
        events:
          emit:
            data: dailyBugleEmployees
      - type: list
        version: *block-version
        events:
          listen:
            data: dailyBugleEmployees
        parameters:
          header: [{ prop: firstName }, { string.case: upper }]
          fields:
            - label: Description
              value:
                string.format:
                  template: '{firstName} {lastName} is an employee of the {department} department!'
                  values:
                    firstName: { prop: firstName }
                    lastName: { prop: lastName }
                    department: { prop: department }

      # string.case
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## string.case
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label:
                - static: patrick
                - string.case: upper

      # string.format
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## string.format
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: noop
            remapAfter:
              object.from:
                lotteryPrize: 5000
        events:
          emit:
            data: lotteryResults
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - value:
                string.format:
                  template: 'You have won â‚¬{lotteryAmount} in the lottery!!'
                  values:
                    lotteryAmount: { prop: lotteryPrize }
        events:
          listen:
            data: lotteryResults

      # string.replace
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## string.replace
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: noop
            remapBefore: Eindhoven is the best city in the Netherlands
            remapAfter:
              string.replace:
                (best*)\w+: cleanest
        events:
          emit:
            data: stringReplaceData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - value: { root }
        events:
          listen:
            data: stringReplaceData

  - name: Objects
    blocks:
      # Introduction
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## Introduction
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              # For simplicity's sake, we mock the incoming data here. It's the same as you would get from Spotify however.
              object.from:
                acousticness: 0.346
                analysis_url: https://api.spotify.com/v1/audio-analysis/2GfQhXyoUXYTkMHDXJhCU5
                danceability: 0.565
                duration_ms: 544518
                energy: 0.906
                id: 2GfQhXyoUXYTkMHDXJhCU5
                instrumentalness: 0.00474
                key: 9,
                liveness: 0.0718
                loudness: -5.229
                mode: 0
                speechiness: 0.124
                tempo: 119.856
                time_signature: 4
                track_href: https://api.spotify.com/v1/tracks/2GfQhXyoUXYTkMHDXJhCU5
                type: audio_features
                uri: spotify:track:2GfQhXyoUXYTkMHDXJhCU5
                valence: 0.38
            type: noop
            remapAfter:
              object.from:
                danceability: { prop: danceability }
                liveness: { prop: liveness }
                tempo: { prop: tempo }
                time_signature: { prop: time_signature }
            onSuccess:
              type: noop
              remapAfter:
                # For simplicity's sake, we mock the incoming data here. It's the same as you would get from Spotify however.
                object.from:
                  disc_number: 1
                  duration_ms: 544517
                  explicit: false
                  external_ids:
                    object.from:
                      isrc: AU2ZC2200022
                  external_urls:
                    object.from:
                      spotify: https://open.spotify.com/track/2GfQhXyoUXYTkMHDXJhCU5
                  href: https://api.spotify.com/v1/tracks/2GfQhXyoUXYTkMHDXJhCU5
                  id: 2GfQhXyoUXYTkMHDXJhCU5
                  name: Iron Lung
                  popularity: 54
                  preview_url: https://p.scdn.co/mp3-preview/3b764c5efea978ec265a6020ae688b21b78549e0?cid=0b297fa8a249464ba34f5861d4140e58
                  track_number: 6
                  type: track
                  uri: spotify:track:2GfQhXyoUXYTkMHDXJhCU5
                  is_local: false
              onSuccess:
                remapBefore:
                  object.from:
                    audio_features: { history: 1 }
                    track_info:
                      object.from:
                        name: { prop: name }
                        popularity: { prop: popularity }
                        spotify_url: [{ prop: external_urls }, { prop: spotify }]
                type: noop
        events:
          emit:
            data: spotify_info
      - type: markdown
        version: *block-version
        events:
          listen:
            data: spotify_info
        parameters:
          content:
            string.format:
              template: |
                <br /> Danceability = {danceability}
                <br /> Liveness = {liveness}
                <br /> Tempo = {tempo}
                <br /> Time signature = {time_signature}
                <br /> Name = {name}
                <br /> Popularity = {popularity}
                <br /> Spotify link = {url}

              values:
                danceability: [{ prop: audio_features }, { prop: danceability }]
                liveness: [{ prop: audio_features }, { prop: liveness }]
                tempo: [{ prop: audio_features }, { prop: tempo }]
                time_signature: [{ prop: audio_features }, { prop: time_signature }]
                name: [{ prop: track_info }, { prop: name }]
                popularity: [{ prop: track_info }, { prop: popularity }]
                url: [{ prop: track_info }, { prop: spotify_url }]

      # object.from
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## object.from
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                username: Chris Taub
                email: example@hotmail.com
                addresses:
                  object.from:
                    work:
                      object.from:
                        city: Eindhoven
                        address: Nachtegaallaan 15
                    home:
                      object.from:
                        city: Amsterdam
                        address: Amstel 1
            type: noop
        events:
          emit:
            data: objectFromData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label: { prop: username }
              value: { prop: email }
            - label: Work address
              value: [{ prop: addresses }, { prop: work }]
            - label: Home address
              value: [{ prop: addresses }, { prop: home }]
        events:
          listen:
            data: objectFromData

      # object.assign
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## object.assign
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                title: Weekly Fishing 21
            type: noop
            remapAfter:
              object.assign:
                author: John Doe
        events:
          emit:
            data: objectAssignData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label: { prop: title }
              value:
                string.format:
                  template: By {author}
                  values:
                    author: { prop: author }
        events:
          listen:
            data: objectAssignData

      # object.omit
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## object.omit
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                title: Weekly Fishing 21
                author: John Doe
                content:
                  object.from:
                    introduction: This is the introduction for the new weekly fishing issue
                    paragraph1: ...
                    interview: ...
            type: noop
            remapAfter:
              object.omit:
                - author
                - - content
                  - interview
        events:
          emit:
            data: objectOmitData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label: { prop: title }
            - value: [{ prop: content }, { prop: introduction }]
        events:
          listen:
            data: objectOmitData

  - name: Arrays
    blocks:
      # Introduction
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## Introduction
            ( See console for output )
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                      age: 19
                  - object.from:
                      name: Otto
                      occupation: Scientist
                      age: 50
                  - object.from:
                      name: Harry
                      occupation: CEO
                      age: 20
              - array.map:
                  - if:
                      condition: { gt: [{ prop: age }, 40] }
                      then:
                        object.assign:
                          title: Senior employee
                      else:
                        object.assign:
                          title: Junior employee
                  - object.omit:
                      - age
            type: noop
            onSuccess:
              remapBefore:
                array.from:
                  - { root: null }
                  - array.from:
                      - object.from:
                          name: Peter 2
                          occupation: Delivery driver
                      - object.from:
                          name: Harry 2
                          occupation: CEO
              type: log

      # array.from
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array.from
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                name: Peter
                occupation: Delivery driver
            type: noop
            remapAfter:
              array.from:
                - root: null
        events:
          emit:
            data: arrayFromData
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayFromData

      # array.map
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array.map
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                  - object.from:
                      name: Otto
                      occupation: Scientist
                  - object.from:
                      name: Harry
                      occupation: CEO
              - array.map:
                  object.omit:
                    - name
            type: noop
        events:
          emit:
            data: arrayMapData1
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayMapData1

      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                  - object.from:
                      name: Otto
                      occupation: Scientist
                  - object.from:
                      name: Harry
                      occupation: CEO
              - array.map:
                  if:
                    condition: { equals: [{ prop: occupation }, Scientist] }
                    then:
                      object.from:
                        name: { prop: name }
                        occupation: { prop: occupation }
                    else: null
              - null.strip: null
            type: noop
        events:
          emit:
            data: arrayMapData2
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayMapData2

      ## array.append
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array.append
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                  - object.from:
                      name: Otto
                      occupation: Scientist
                  - object.from:
                      name: Harry
                      occupation: CEO
              - array.append:
                  - object.from:
                      name: James
                      occupation: News reporter
            type: noop
        events:
          emit:
            data: arrayAppendData
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayAppendData

      ## array.omit
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array.omit
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                  - object.from:
                      name: Otto
                      occupation: Scientist
                  - object.from:
                      name: Harry
                      occupation: CEO
                  - object.from:
                      name: James
                      occupation: News reporter
              - array.omit:
                  - 3
            type: noop
        events:
          emit:
            data: arrayOmitData1
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayOmitData1
      - type: table
        version: *block-version
        events:
          listen:
            data: arrayOmitData1
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
            - onClick: removePerson
              button:
                label: Omit
        actions:
          removePerson:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                  - object.from:
                      name: Otto
                      occupation: Scientist
                  - object.from:
                      name: Harry
                      occupation: CEO
                  - object.from:
                      name: James
                      occupation: News reporter
              - array.omit:
                  - context: index
            type: log

      ## array.unique
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array.unique
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - object.from:
                      name: Peter
                      occupation: Delivery driver
                      age: 19
                  - object.from:
                      name: Peter
                      occupation: Photographer
                      age: 19
                  - object.from:
                      name: Otto
                      occupation: Scientist
                      age: 50
                  - object.from:
                      name: Harry
                      occupation: CEO
                      age: 20
              - array.unique:
                  object.from:
                    name: { prop: name }
                    age: { prop: age }
            type: noop
        events:
          emit:
            data: arrayUniqueData
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: Occupation
              value: { prop: occupation }
        events:
          listen:
            data: arrayUniqueData

  - name: Data
    blocks:
      # root
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## root
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.query
            resource: people
            query:
              object.from:
                $filter: city eq 'Eindhoven'
            onSuccess:
              remapBefore:
                object.from:
                  name: Residents of Eindhoven
                  people:
                    root: null
              type: noop
              remapAfter:
                - prop: people
        events:
          emit:
            data: rootData
      - type: table
        version: *block-version
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: City
              value: { prop: city }
            - label: Email
              value: { prop: email }
        events:
          listen:
            data: rootData

      # history
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## history
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                title: Most influential bands of all time
                content: ...
            type: noop # history 0
            onSuccess:
              type: resource.query # history 1
              resource: people
              onSuccess:
                type: noop # history 2
                onSuccess:
                  remapBefore:
                    history: 1
                  type: noop
        events:
          emit:
            data: 1historyData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label: { prop: title }
              value: { prop: content }
        events:
          listen:
            data: 1historyData

      # array
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## array
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              - array.from:
                  - a
                  - b
                  - c
              - array.map:
                  object.from:
                    length: { array: length }
                    index: { array: index }
            type: noop
        events:
          emit:
            data: arrayData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - value: { root }
        events:
          listen:
            data: arrayData

      # app
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## app
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              object.from:
                id:
                  app: id
                locale:
                  app: locale
                url:
                  app: url
            type: noop
        events:
          emit:
            data: appData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - value:
                string.format:
                  template: id = {id}
                  values:
                    id: { prop: id }
            - value:
                string.format:
                  template: locale = {locale}
                  values:
                    locale: { prop: locale }
            - value:
                string.format:
                  template: url = {url}
                  values:
                    url: { prop: url }
        events:
          listen:
            data: appData

      # page
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## page
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: noop
            remapBefore:
              object.from:
                data:
                  page: data
                url:
                  page: url
        events:
          emit:
            data: pageData
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - value:
                string.format:
                  template: data = {data}
                  values:
                    data: { prop: data }
            - value:
                string.format:
                  template: url = {url}
                  values:
                    url: { prop: url }
        events:
          listen:
            data: pageData

      # user
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## user
      - type: html
        version: *block-version
        parameters:
          placeholders:
            sub: { user: sub }
            name: { user: name }
            email: { user: email }
            verified: { user: email_verified }
            picture: { user: picture }
            locale: { user: locale }
          content: |
            <b>Sub:</b>
            <br><span data-content="sub"></span>
            <br><b>Name:</b>
            <br><span data-content="name"></span>
            <br><b>Email:</b>
            <br><span data-content="email"></span>
            <br><b>Verified?</b>
            <br><span data-content="verified"></span>
            <br><b>Locale:</b>
            <br><span data-content="locale"></span>
            <br><b>Picture link:</b>
            <br><span data-content="picture"></span>

      # context
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## context
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              array.from:
                - object.from:
                    name: John
                    age: 78
                - object.from:
                    name: Peter
                    age: 30
                - object.from:
                    name: Tom
                    age: 17
            type: noop
        events:
          emit:
            data: contextData
      - type: table
        version: *block-version
        events:
          listen:
            data: contextData
        parameters:
          fields:
            - label: Name
              value: { prop: name }
              onClick: clickName
            - label: Age
              value: { prop: age }
        actions:
          clickName:
            remapBefore:
              context: index
            type: message
            body: { root }
            dismissable: true
            timeout: 4000

      # static
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## static
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label:
                static: Hello!

      # translate
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## translate
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - label: { translate: weatherTitle }
              value: { translate: weatherBody }

  - name: History
    blocks:
      # history
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## history
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.query
            resource: people
            onSuccess:
              remapBefore:
                object.from:
                  name: Disrupting
                  type: data!
              type: noop
              onSuccess:
                remapBefore:
                  history: 1
                type: noop
        events:
          emit:
            data: historyData1
      - type: detail-viewer
        version: *block-version
        layout: static
        parameters:
          fields:
            - label: { prop: name }
              value: { prop: type }
        events:
          listen:
            data: historyData1
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.query
            resource: people
            remapAfter:
              object.from:
                name: Disrupting
                type: data!
            onSuccess:
              type: noop
              onSuccess:
                remapBefore:
                  history: 1
                type: noop
        events:
          emit:
            data: historyData2
      - type: detail-viewer
        version: *block-version
        layout: static
        parameters:
          fields:
            - label: { prop: name }
              value: { prop: type }
        events:
          listen:
            data: historyData2
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.query
            resource: people
            onSuccess:
              type: noop
              onSuccess:
                remapBefore:
                  history: 1
                type: noop
        events:
          emit:
            data: historyData3
      - type: table
        version: *block-version
        layout: static
        parameters:
          fields:
            - label: Name
              value: { prop: name }
            - label: city
              value: { prop: city }
        events:
          listen:
            data: historyData3

      # from.history
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## from.history
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: noop
            remapAfter:
              object.from:
                name: Rolling stones at Amsterdam Arena
                artist: Rolling Stones
                location: Amsterdam Arena
                date: [{ static: 07-07-2022 }, { date.parse: dd-MM-yyyy }]
                price: $120
            onSuccess:
              type: noop
              onSuccess:
                type: resource.query
                resource: people
                remapAfter:
                  object.from:
                    concertDetails:
                      from.history:
                        index: 1
                        props:
                          name: { prop: name }
                          date: { prop: date }
                          attendees: { root: null }
        events:
          emit:
            data: fromHistoryData
      - type: detail-viewer
        version: *block-version
        layout: static
        parameters:
          fields:
            - label: Concert details
              value: [{ prop: concertDetails }, { prop: name }]
            - value: [{ prop: concertDetails }, { prop: date }]
        events:
          listen:
            data: fromHistoryData
      - type: table
        version: *block-version
        layout: static
        parameters:
          fields:
            - value: [{ prop: concertDetails }, { prop: attendees }]
              repeat:
                - label: Name
                  value: { prop: name }
                - label: city
                  value: { prop: city }
        events:
          listen:
            data: fromHistoryData

      # assign.history
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## assign.history
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: resource.count
            resource: people
            remapAfter:
              object.from:
                peopleAmount: { root: null }
            onSuccess:
              type: noop
              onSuccess:
                remapBefore:
                  object.from:
                    name: Rolling stones at Amsterdam Arena
                    artist: Rolling Stones
                    location: Amsterdam Arena
                    date: [{ static: 07-07-2022 }, { date.parse: dd-MM-yyyy }]
                    price: $120
                type: noop
                remapAfter:
                  object.from:
                    concertDetails:
                      assign.history:
                        index: 1
                        props:
                          attendees: { prop: peopleAmount }
        events:
          emit:
            data: assignHistoryData
      - type: markdown
        version: *block-version
        parameters:
          content:
            string.format:
              template: |
                <br /> Title: {name}
                <br /> By: {artist}
                <br /> Where: {location}
                <br /> When: {date}
                <br /> Price: {price}
                <br /> Number of people: {attendees}
              values:
                name: [{ prop: concertDetails }, { prop: name }]
                artist: [{ prop: concertDetails }, { prop: artist }]
                location: [{ prop: concertDetails }, { prop: location }]
                date: [{ prop: concertDetails }, { prop: date }]
                price: [{ prop: concertDetails }, { prop: price }]
                attendees: [{ prop: concertDetails }, { prop: attendees }]
        events:
          listen:
            data: assignHistoryData

      # omit.history
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## omit.history
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            type: noop
            remapAfter:
              object.from:
                name: Rolling stones at Amsterdam Arena
                artist: Rolling Stones
                location: Amsterdam Arena
                date: [{ static: 07-07-2022 }, { date.parse: dd-MM-yyyy }]
                bandPasswords:
                  array.from: [1, 1, 1]
                bankDetailsAttendees:
                  array.from: [1, 1, 1]
            onSuccess:
              type: noop
              onSuccess:
                type: resource.query
                resource: people
                remapAfter:
                  object.from:
                    attendees: { root }
                    concertDetails:
                      omit.history:
                        index: 1
                        keys:
                          - bandPasswords
                          - bankDetailsAttendees
        events:
          emit:
            data: omitHistoryData
      - type: markdown
        version: *block-version
        parameters:
          content:
            string.format:
              template: |
                <br /> Title: {name}
                <br /> By: {artist}
                <br /> Where: {location}
                <br /> When: {date}
                <br /> Passwords of band members: {passwords}
                <br /> Bank details attendees: {bankDetails}
              values:
                name: [{ prop: concertDetails }, { prop: name }]
                artist: [{ prop: concertDetails }, { prop: artist }]
                location: [{ prop: concertDetails }, { prop: location }]
                date: [{ prop: concertDetails }, { prop: date }]
                passwords: [{ prop: concertDetails }, { prop: bandPasswords }]
                bankDetails: [{ prop: concertDetails }, { prop: bankDetailsAttendees }]
        events:
          listen:
            data: omitHistoryData
  - name: Conditionals
    blocks:
      # if: equals
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## if: equals
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: number
              label: Guess the number
              name: number
              requirements:
                - required: true
        actions:
          onSubmit:
            remapBefore:
              if:
                condition:
                  equals:
                    - prop: number
                    - 4
                then:
                  static: You guessed right!
                else:
                  static: You guessed wrong!
            type: message
            body: { root: null }
      # if: not
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## if: not
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: number
              label: Guess the number
              name: number
              requirements:
                - required: true
        actions:
          onSubmit:
            remapBefore:
              if:
                condition:
                  not:
                    - prop: number
                    - 4
                then:
                  static: You guessed wrong!
                else:
                  static: You guessed right!
            type: message
            body: { root: null }
      # if: gt (greater than)
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## if: gt (greater than)
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              array.from:
                - object.from:
                    item: Chair
                    stock: 12
                - object.from:
                    item: Desk
                    stock: 2
                - object.from:
                    item: Fridge
                    stock: 6
            type: noop
        events:
          emit:
            data: warehouseStock
      - type: table
        version: *block-version
        events:
          listen:
            data: warehouseStock
        parameters:
          fields:
            - label: Item
              value: { prop: item }
            - label: Stock
              value: { prop: stock }
            - label: Check stock
              onClick: checkStock
              button:
                label: Check
        actions:
          checkStock:
            remapBefore:
              if:
                condition:
                  gt:
                    - prop: stock
                    - 5
                then:
                  static: This item has plenty of stock
                else:
                  static: This item is running low on stock
            type: message
            body: { root: null }
      # if: lt (lesser than)
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## if: lt (lesser than)
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              array.from:
                - object.from:
                    item: Chair
                    stock: 12
                - object.from:
                    item: Desk
                    stock: 2
                - object.from:
                    item: Fridge
                    stock: 6
            type: noop
        events:
          emit:
            data: warehouseStock
      - type: table
        version: *block-version
        events:
          listen:
            data: warehouseStock
        parameters:
          fields:
            - label: Item
              value: { prop: item }
            - label: Stock
              value: { prop: stock }
            - label: Check stock
              onClick: checkStock
              button:
                label: Check
        actions:
          checkStock:
            remapBefore:
              if:
                condition:
                  lt:
                    - prop: stock
                    - 5
                then:
                  static: This item is running low on stock
                else:
                  static: This item has plenty of stock
            type: message
            body: { root: null }
      # match
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## match
      - type: form
        version: *block-version
        parameters:
          fields:
            - name: Gem
              label: { prop: label }
              type: enum
              action: getGems
        actions:
          getGems:
            type: noop
            remapAfter:
              array.from:
                - object.from:
                    label: Diamond
                    value: Diamond
                - object.from:
                    label: Ruby
                    value: Ruby
                - object.from:
                    label: Gold
                    value: Gold
                - object.from:
                    label: Sapphire
                    value: Sapphire
          onSubmit:
            remapBefore:
              object.from:
                type: { prop: Gem }
                value:
                  match:
                    - case: { equals: [{ prop: Gem }, Diamond] }
                      value: 100
                    - case: { equals: [{ prop: Gem }, Ruby] }
                      value: 75
                    - case: { equals: [{ prop: Gem }, Gold] }
                      value: 50
                    - case: { equals: [{ prop: Gem }, Sapphire] }
                      value: 25
            type: message
            body:
              string.format:
                template: Your {gem} is worth â‚¬{value},-
                values:
                  gem: { prop: type }
                  value: { prop: value }
  - name: Dates
    blocks:
      # date.parse
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## date.parse
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: date
              name: unparsedDate
              requirements:
                - required: true
        actions:
          onSubmit:
            remapBefore:
              object.from:
                parsedDate: [{ prop: unparsedDate }, { date.parse: yyyy-MM-dd }]
            type: log
      # date.format
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## date.format
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: date
              name: unformattedDate
              requirements:
                - required: true
        actions:
          onSubmit:
            remapBefore:
              object.from:
                formattedDate: [{ prop: unformattedDate }, { date.format: null }]
            type: message
            body:
              string.format:
                template: Formatted date = {date}
                values:
                  date: { prop: formattedDate }
      # date.add
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## date.add
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: date
              name: startDate
              label: Select when you want to start your week off
              requirements:
                - required: true
        actions:
          onSubmit:
            remapBefore:
              object.assign:
                vacationEnd:
                  [
                    { prop: startDate },
                    { date.parse: yyyy-MM-dd },
                    { date.add: 1w },
                    { date.format },
                  ]
            type: message
            body:
              string.format:
                template: Your vacation runs from {start} to {end}
                values:
                  start: { prop: startDate }
                  end: { prop: vacationEnd }

      # date.now
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## date.now
      - type: data-loader
        version: *block-version
        actions:
          onLoad:
            remapBefore:
              date.now: null
            type: noop
        events:
          listen:
            refresh: refreshCurDay
          emit:
            data: currentDay
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: What date is it?
              onClick: refreshDay
        actions:
          refreshDay:
            type: event
            event: refreshCurDay
      - type: detail-viewer
        version: *block-version
        parameters:
          fields:
            - type: string
              value: { root }
        events:
          listen:
            data: currentDay
  - name: Randomness
    blocks:
      # random.choice
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## random.choice
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Get random number from list
              onClick: randomNumber
            - label: Get random name from list
              onClick: randomName
            - label: Get random name or number from list
              onClick: randomNoN
        actions:
          randomNumber:
            remapBefore:
              - array.from: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
              - random.choice: null
            type: message
            body: { root }
          randomName:
            remapBefore:
              - array.from: ['Peter', 'Patrick', 'Michael', 'Harry']
              - random.choice: null
            type: message
            body: { root }
          randomNoN:
            remapBefore:
              - array.from:
                  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'Peter', 'Patrick', 'Michael', 'Harry']
              - random.choice: null
            type: message
            body: { root }

      # random.integer
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## random.integer
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Get random number between 1 - 1000
              onClick: randomNumber
        actions:
          randomNumber:
            remapBefore:
              random.integer:
                - 0
                - 1000
            type: message
            body: { root }

      # random.float
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## random.float
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Get random float value between 0 - 1
              onClick: randomFloat
        actions:
          randomFloat:
            remapBefore:
              random.float:
                - 0
                - 1
            type: message
            body: { root }

      # random.string
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## random.string
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Generate a random 6 letter word
              onClick: randomFloat
        actions:
          randomFloat:
            remapBefore:
              random.string:
                choice: abcdefghijklmnopqrstuvwxyz0123456789
                length: 6
            type: message
            body: { root }

  - name: Other
    blocks:
      # ics
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## ics
      - type: form
        version: *block-version
        parameters:
          fields:
            - type: string
              name: title
              requirements:
                - required: true
            - type: date
              name: startDate
              label: Start
              requirements:
                - required: true
            - type: date
              name: endDate
              label: End
            - type: string
              name: duration
            - type: string
              name: description
            - type: string
              name: url
            - type: string
              name: locationDescription
            - type: geocoordinates
              name: coordinates
        actions:
          onSubmit:
            remapBefore:
              ics:
                start: { prop: startDate }
                title: { prop: title }
                end: { prop: endDate }
                duration: { prop: duration }
                description: { prop: description }
                url: { prop: url }
                location: { prop: locationDescription }
                coordinates: { prop: coordinates }
            type: download
            filename: test.ics

      # null.strip
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## null.strip
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Strip null values
              onClick: stripNulls
        actions:
          stripNulls:
            remapBefore:
              - object.from:
                  - array.from: [0, null, 'Peter']
                  - object.from:
                      array2:
                        array.from: [4, null, 0.4234, null]
              - null.strip:
                  depth: 2
            type: log

      # log
      - type: markdown
        version: *block-version
        layout: static
        parameters:
          content: |
            * ## log
      - type: button-list
        version: *block-version
        parameters:
          buttons:
            - label: Create log
              onClick: logValues
        actions:
          logValues:
            remapBefore:
              array.from: [0, 4, null, null, 'Peter', 0.4234, null]
            type: noop
            remapAfter:
              object.from:
                name: Peter
                age: 49
            onSuccess:
              type: noop
              remapAfter:
                object.assign:
                  birthday: 07-08-2023
              onSuccess:
                type: noop
                remapAfter:
                  log: info
